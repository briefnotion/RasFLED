// ***************************************************************************************
// *
// *    Core       | Everything within this document is proprietary to Core Dynamics.
// *    Dynamics   | Any unauthorized duplication will be subject to prosecution.
// *
// *    Department : (R+D)^2                        Name: gadgets_automobile.cpp
// *       Sub Dept: Programming
// *    Location ID: 856-45B
// *                                                      (c) 2856 - 2858 Core Dynamics
// ***************************************************************************************

#ifndef GADGETS_AUTOMOBILE_CPP
#define GADGETS_AUTOMOBILE_CPP

#include "gadgets_automobile.h"

using namespace std;

// -------------------------------------------------------------------------------------
//  Automobile Panel Class

void AUTOMOBILE_OVERVIEW_GADGET::create()
{
  // Build Display Window
  GADGET_PANEL.PROP.SIZEY = PROP.SIZEY;
  GADGET_PANEL.PROP.SIZEX = PROP.SIZEX;
  GADGET_PANEL.PROP.POSY = PROP.POSY;
  GADGET_PANEL.PROP.POSX = PROP.POSX;
  GADGET_PANEL.PROP.COLOR = COLOR_WHITE;
  GADGET_PANEL.PROP.BCOLOR = COLOR_BLACK;

  GADGET_PANEL.create();

  SYMBOL_CAR_BODY.PROP.POSX = 7;
  SYMBOL_CAR_BODY.PROP.POSY = 2;
  SYMBOL_CAR_BODY.PROP.SIZEX = 22;
  SYMBOL_CAR_BODY.PROP.SIZEY = 18;
  SYMBOL_CAR_BODY.PROP.COLORS_ON = true;
  SYMBOL_CAR_BODY.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_BODY.PROP.JUSTIFICATION_LEFT = true;
  SYMBOL_CAR_BODY.set_text(CAR_SYMBOLS.car_body());

  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.POSX = 3;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.POSY = 2 + 6;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.UPDATE_INDICATION = true;
  SYMBOL_CAR_DOOR_LEFT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.JUSTIFICATION_LEFT = true;

  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.POSX = 3;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.POSY = 2 + 11;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.UPDATE_INDICATION = true;
  SYMBOL_CAR_DOOR_LEFT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.JUSTIFICATION_LEFT = true;

  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.POSX = 3 + 17;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.POSY = 2 + 6;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.UPDATE_INDICATION = true;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.JUSTIFICATION_LEFT = true;

  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.POSX = 3 + 17;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.POSY = 2 + 11;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.UPDATE_INDICATION = true;
  SYMBOL_CAR_DOOR_RIGHT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.JUSTIFICATION_LEFT = true;
  
  //-----------
  // Individual Tire Speeds
  LF_SPEED.PROP.POSX = 3;
  LF_SPEED.PROP.POSY = 5;
  LF_SPEED.PROP.SIZEX = 5;
  LF_SPEED.PROP.COLORS_ON = true;
  LF_SPEED.PROP.BCOLOR = COLOR_BLACK;
  LF_SPEED.PROP.COLOR = COLOR_WHITE;
  LF_SPEED.PROP.JUSTIFICATION_LEFT = true;

  RF_SPEED.PROP.POSX = 22;
  RF_SPEED.PROP.POSY = 5;
  RF_SPEED.PROP.SIZEX = 5;
  RF_SPEED.PROP.COLORS_ON = true;
  RF_SPEED.PROP.BCOLOR = COLOR_BLACK;
  RF_SPEED.PROP.COLOR = COLOR_WHITE;
  RF_SPEED.PROP.JUSTIFICATION_LEFT = true;

  LB_SPEED.PROP.POSX = 3;
  LB_SPEED.PROP.POSY = 17;
  LB_SPEED.PROP.SIZEX = 5;
  LB_SPEED.PROP.COLORS_ON = true;
  LB_SPEED.PROP.BCOLOR = COLOR_BLACK;
  LB_SPEED.PROP.COLOR = COLOR_WHITE;
  LB_SPEED.PROP.JUSTIFICATION_LEFT = true;

  RB_SPEED.PROP.POSX = 22;
  RB_SPEED.PROP.POSY = 17;
  RB_SPEED.PROP.SIZEX = 5;
  RB_SPEED.PROP.COLORS_ON = true;
  RB_SPEED.PROP.BCOLOR = COLOR_BLACK;
  RB_SPEED.PROP.COLOR = COLOR_WHITE;
  RB_SPEED.PROP.JUSTIFICATION_LEFT = true;

  LF_SPEED_OFFSET.PROP.POSX = 3;
  LF_SPEED_OFFSET.PROP.POSY = 6;
  LF_SPEED_OFFSET.PROP.SIZEX = 5;
  LF_SPEED_OFFSET.PROP.COLORS_ON = true;
  LF_SPEED_OFFSET.PROP.BCOLOR = COLOR_BLACK;
  LF_SPEED_OFFSET.PROP.COLOR = COLOR_WHITE;
  LF_SPEED_OFFSET.PROP.JUSTIFICATION_LEFT = true;

  RF_SPEED_OFFSET.PROP.POSX = 22;
  RF_SPEED_OFFSET.PROP.POSY = 6;
  RF_SPEED_OFFSET.PROP.SIZEX = 5;
  RF_SPEED_OFFSET.PROP.COLORS_ON = true;
  RF_SPEED_OFFSET.PROP.BCOLOR = COLOR_BLACK;
  RF_SPEED_OFFSET.PROP.COLOR = COLOR_WHITE;
  RF_SPEED_OFFSET.PROP.JUSTIFICATION_LEFT = true;

  LB_SPEED_OFFSET.PROP.POSX = 3;
  LB_SPEED_OFFSET.PROP.POSY = 18;
  LB_SPEED_OFFSET.PROP.SIZEX = 5;
  LB_SPEED_OFFSET.PROP.COLORS_ON = true;
  LB_SPEED_OFFSET.PROP.BCOLOR = COLOR_BLACK;
  LB_SPEED_OFFSET.PROP.COLOR = COLOR_WHITE;
  LB_SPEED_OFFSET.PROP.JUSTIFICATION_LEFT = true;

  RB_SPEED_OFFSET.PROP.POSX = 22;
  RB_SPEED_OFFSET.PROP.POSY = 18;
  RB_SPEED_OFFSET.PROP.SIZEX = 5;
  RB_SPEED_OFFSET.PROP.COLORS_ON = true;
  RB_SPEED_OFFSET.PROP.BCOLOR = COLOR_BLACK;
  RB_SPEED_OFFSET.PROP.COLOR = COLOR_WHITE;
  RB_SPEED_OFFSET.PROP.JUSTIFICATION_LEFT = true;

  //-----------
  LIGHTS_STATUS.PROP.POSX = 3;
  LIGHTS_STATUS.PROP.POSY = 21;
  LIGHTS_STATUS.PROP.SIZEX = 20;
  LIGHTS_STATUS.PROP.COLORS_ON = true;
  LIGHTS_STATUS.PROP.BCOLOR = COLOR_BLACK;
  LIGHTS_STATUS.PROP.COLOR = COLOR_WHITE;
  LIGHTS_STATUS.PROP.UPDATE_INDICATION = true;
  LIGHTS_STATUS.PROP.JUSTIFICATION_LEFT = true;
  
  FUEL_LEVEL.PROP.POSX = 3;
  FUEL_LEVEL.PROP.POSY = 22;
  FUEL_LEVEL.PROP.SIZEX = 20;
  FUEL_LEVEL.PROP.COLORS_ON = true;
  FUEL_LEVEL.PROP.BCOLOR = COLOR_BLACK;
  FUEL_LEVEL.PROP.COLOR = COLOR_WHITE;
  FUEL_LEVEL.PROP.JUSTIFICATION_LEFT = true;
}

void AUTOMOBILE_OVERVIEW_GADGET::update(system_data &sdSysData, unsigned long &tmeCurrentMillis)
{
  TRUTH_CATCH door_changed;

  // Update Door Information

  // Get value
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CONFIG.vSWITCH_PIN_MAP.at(0).value, LEFT_BACK_DOOR_VAL));
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CONFIG.vSWITCH_PIN_MAP.at(1).value, LEFT_FRONT_DOOR_VAL));
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CONFIG.vSWITCH_PIN_MAP.at(2).value, RIGHT_BACK_DOOR_VAL));
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CONFIG.vSWITCH_PIN_MAP.at(3).value, RIGHT_FRONT_DOOR_VAL));

  if (door_changed.has_truth() == true)
  //if (true == true)
  {
    // Set value of all doors regardless which changed.

    // Left Front
    if (LEFT_FRONT_DOOR_VAL == true)
    //if (true == true)
    {
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_text(CAR_SYMBOLS.car_door_left_open(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_text(CAR_SYMBOLS.car_door_left_front_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
    }

    // Right Front
    if (RIGHT_FRONT_DOOR_VAL == true)
    {
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_text(CAR_SYMBOLS.car_door_right_open(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_text(CAR_SYMBOLS.car_door_right_front_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
    }

    // Left Back
    if (LEFT_BACK_DOOR_VAL == true)
    {
      SYMBOL_CAR_DOOR_LEFT_BACK.set_text(CAR_SYMBOLS.car_door_left_open(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_BACK.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_LEFT_BACK.set_text(CAR_SYMBOLS.car_door_left_back_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
    }

    // Right Back
    if (RIGHT_BACK_DOOR_VAL == true)
    {
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_text(CAR_SYMBOLS.car_door_right_open()), tmeCurrentMillis;
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_text(CAR_SYMBOLS.car_door_right_back_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
    }
  }

  //-----------
  // Individual Tire Speeds

  LF_SPEED.set_text(sdSysData.CAR_INFO.STATUS.SPEED.LF_mph());
  RF_SPEED.set_text(sdSysData.CAR_INFO.STATUS.SPEED.RF_mph());
  LB_SPEED.set_text(sdSysData.CAR_INFO.STATUS.SPEED.LB_mph());
  RB_SPEED.set_text(sdSysData.CAR_INFO.STATUS.SPEED.RB_mph());

  LF_SPEED_OFFSET.set_text(sdSysData.CAR_INFO.CALCULATED.LF_WHEEL_SPEED_OFFSET.mph());
  RF_SPEED_OFFSET.set_text(sdSysData.CAR_INFO.CALCULATED.RF_WHEEL_SPEED_OFFSET.mph());
  LB_SPEED_OFFSET.set_text(sdSysData.CAR_INFO.CALCULATED.LB_WHEEL_SPEED_OFFSET.mph());
  RB_SPEED_OFFSET.set_text(sdSysData.CAR_INFO.CALCULATED.RB_WHEEL_SPEED_OFFSET.mph());
  
  //-----------
  // Status

  LIGHTS_STATUS.set_text("LIGHTS: " + sdSysData.CAR_INFO.STATUS.INDICATORS.lights(), tmeCurrentMillis);
  FUEL_LEVEL.set_text("  FUEL: " + sdSysData.CAR_INFO.STATUS.FUEL.level(), tmeCurrentMillis);

  if (sdSysData.CAR_INFO.STATUS.FUEL.val_level() >= 4)
  {
    FUEL_LEVEL.set_color(COLOR_BLACK, COLOR_WHITE);
  }
  else if (sdSysData.CAR_INFO.STATUS.FUEL.val_level() >= 1 && sdSysData.CAR_INFO.STATUS.FUEL.val_level() < 4)
  {
    FUEL_LEVEL.set_color(COLOR_YELLOW, COLOR_WHITE);
  }
  else 
  {
    FUEL_LEVEL.set_color(COLOR_RED, COLOR_WHITE);
  }
}

bool AUTOMOBILE_OVERVIEW_GADGET::draw(bool Refresh, unsigned long tmeFrame_Time)
{
  //-----------
  if (CHANGED == false)
  {

  }

  //-----------
  // Car Doors
  SYMBOL_CAR_BODY.draw(GADGET_PANEL, Refresh);

  SYMBOL_CAR_DOOR_LEFT_FRONT.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  SYMBOL_CAR_DOOR_RIGHT_FRONT.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  SYMBOL_CAR_DOOR_LEFT_BACK.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  SYMBOL_CAR_DOOR_RIGHT_BACK.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Individual Tire Speeds
  LF_SPEED.draw(GADGET_PANEL, Refresh);
  RF_SPEED.draw(GADGET_PANEL, Refresh);
  LB_SPEED.draw(GADGET_PANEL, Refresh);
  RB_SPEED.draw(GADGET_PANEL, Refresh);

  LF_SPEED_OFFSET.draw(GADGET_PANEL, Refresh);
  RF_SPEED_OFFSET.draw(GADGET_PANEL, Refresh);
  LB_SPEED_OFFSET.draw(GADGET_PANEL, Refresh);
  RB_SPEED_OFFSET.draw(GADGET_PANEL, Refresh);

  //-----------
  // Status

  LIGHTS_STATUS.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  FUEL_LEVEL.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  //-----------
  GADGET_PANEL.draw(Refresh);

  CHANGED = false;
  return false;
}

// -------------------------------------------------------------------------------------
//  Automobile Panel Class

void AUTOMOBILE_GADGET::create()
{
  //-----------
  // Build Display Window

  AUTOMOBILE_PANEL.PROP.SIZEY = PROP.SIZEY;
  AUTOMOBILE_PANEL.PROP.SIZEX = PROP.SIZEX;
  AUTOMOBILE_PANEL.PROP.POSY = PROP.POSY;
  AUTOMOBILE_PANEL.PROP.POSX = PROP.POSX;
  AUTOMOBILE_PANEL.PROP.COLOR = COLOR_WHITE;
  AUTOMOBILE_PANEL.PROP.BCOLOR = COLOR_BLACK;

  AUTOMOBILE_PANEL.create();

  //-----------

  AD_UNKNOWN.PROP.POSY = 0;
  AD_UNKNOWN.PROP.POSX = 30;
  AD_UNKNOWN.PROP.SIZEX = 30;
  AD_UNKNOWN.PROP.COLORS_ON = true;
  AD_UNKNOWN.PROP.BCOLOR = COLOR_BLACK;
  AD_UNKNOWN.PROP.COLOR = COLOR_WHITE;
  AD_UNKNOWN.PROP.JUSTIFICATION_LEFT = true;

  //-----------
  // Large Velocity
  LARGE_SPEED_DESC.PROP.POSX = 0;
  LARGE_SPEED_DESC.PROP.POSY = 1;
  LARGE_SPEED_DESC.PROP.SIZEX = 1;
  LARGE_SPEED_DESC.PROP.SIZEY = 5;
  LARGE_SPEED_DESC.PROP.COLORS_ON = true;
  LARGE_SPEED_DESC.PROP.UPDATE_INDICATION = false;
  LARGE_SPEED_DESC.set_color(COLOR_WHITE, COLOR_BLUE);
  LARGE_SPEED_DESC.PROP.JUSTIFICATION_LEFT = true;
  LARGE_SPEED_DESC.set_text("S\nP\nD");

  LARGE_SPEED_10.PROP.POSX = 1;
  LARGE_SPEED_10.PROP.POSY = 1;
  LARGE_SPEED_10.PROP.SIZEX = 5;
  LARGE_SPEED_10.PROP.SIZEY = 5;
  LARGE_SPEED_10.PROP.COLORS_ON = true;
  LARGE_SPEED_10.PROP.UPDATE_INDICATION = false;
  LARGE_SPEED_10.set_color(COLOR_BLUE, COLOR_WHITE);
  LARGE_SPEED_10.PROP.JUSTIFICATION_LEFT = true;

  LARGE_SPEED_1.PROP.POSX = 6;
  LARGE_SPEED_1.PROP.POSY = 1;
  LARGE_SPEED_1.PROP.SIZEX = 5;
  LARGE_SPEED_1.PROP.SIZEY = 5;
  LARGE_SPEED_1.PROP.COLORS_ON = true;
  LARGE_SPEED_1.PROP.UPDATE_INDICATION = false;
  LARGE_SPEED_1.set_color(COLOR_BLUE, COLOR_WHITE);
  LARGE_SPEED_1.PROP.JUSTIFICATION_LEFT = true;

  //-----------
  // Large Gear
  LARGE_GEAR_DESC.PROP.POSX = 0;
  LARGE_GEAR_DESC.PROP.POSY = 7;
  LARGE_GEAR_DESC.PROP.SIZEX = 1;
  LARGE_GEAR_DESC.PROP.SIZEY = 5;
  LARGE_GEAR_DESC.PROP.COLORS_ON = true;
  LARGE_GEAR_DESC.PROP.UPDATE_INDICATION = false;
  LARGE_GEAR_DESC.set_color(COLOR_WHITE, COLOR_BLUE);
  LARGE_GEAR_DESC.PROP.JUSTIFICATION_LEFT = true;
  LARGE_GEAR_DESC.set_text("G\nE\nA\nR");

  LARGE_GEAR_1.PROP.POSX = 1;
  LARGE_GEAR_1.PROP.POSY = 7;
  LARGE_GEAR_1.PROP.SIZEX = 5;
  LARGE_GEAR_1.PROP.SIZEY = 5;
  LARGE_GEAR_1.PROP.COLORS_ON = true;
  LARGE_GEAR_1.PROP.UPDATE_INDICATION = true;
  LARGE_GEAR_1.set_color(COLOR_BLUE, COLOR_WHITE);
  LARGE_GEAR_1.PROP.JUSTIFICATION_LEFT = true;

  //-----------

  // Speed and Gear Raw Data
  SPEEDOMETER_DESC.PROP.POSX = 13 + 0;
  SPEEDOMETER_DESC.PROP.POSY = 1;
  SPEEDOMETER_DESC.PROP.SIZEX = 15;
  SPEEDOMETER_DESC.PROP.COLORS_ON = true;
  SPEEDOMETER_DESC.PROP.BCOLOR = COLOR_BLACK;
  SPEEDOMETER_DESC.PROP.COLOR = COLOR_WHITE;
  SPEEDOMETER_DESC.PROP.JUSTIFICATION_LEFT = true;
  SPEEDOMETER_DESC.set_text("Speedometer:");

  // Speed Guage
  SPEEDOMETER.PROP.LABEL = "";
  SPEEDOMETER.PROP.INDICATOR_CHARACTER = '0';
  SPEEDOMETER.PROP.LABEL_SIZE = 0;
  SPEEDOMETER.PROP.COLOR = COLOR_WHITE;
  SPEEDOMETER.PROP.BCOLOR = COLOR_BLACK;
  SPEEDOMETER.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  SPEEDOMETER.PROP.COLOR_MARKER = COLOR_BLUE;
  SPEEDOMETER.PROP.BCOLOR_MARKER = COLOR_WHITE;
  SPEEDOMETER.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  SPEEDOMETER.PROP.POSY = 2;
  SPEEDOMETER.PROP.POSX = 13 + 0;
  SPEEDOMETER.PROP.BAR_SIZE = 45;
  SPEEDOMETER.PROP.GUAGE_BAR = true;
  SPEEDOMETER.PROP.MAX_VALUE = 75;
  SPEEDOMETER.PROP.MIN_VALUE = 0;
  SPEEDOMETER.PROP.MIN_MAX = true;
  SPEEDOMETER.PROP.MIN_MAX_FILLER = true;
  SPEEDOMETER.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  SPEEDOMETER.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  SPEEDOMETER.PROP.MIN_MAX_INDICATORS = false;
  SPEEDOMETER.MIN_MAX_HISTORY.PROP.SLICES = 20;
  SPEEDOMETER.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  SPEEDOMETER.PROP.COLORS_ON = true;
  SPEEDOMETER.PROP.PRINT_VALUE = false;
  SPEEDOMETER.PROP.PRINT_MIN = false;
  SPEEDOMETER.PROP.PRINT_MAX = false;

  //Speed Text
  SPEED.PROP.POSX = 13 + 28;
  SPEED.PROP.POSY = 1;
  SPEED.PROP.SIZEX = 5;
  SPEED.PROP.COLORS_ON = true;
  SPEED.PROP.BCOLOR = COLOR_BLACK;
  SPEED.PROP.COLOR = COLOR_WHITE;
  SPEED.PROP.JUSTIFICATION_LEFT = true;

  //Gear Text
  GEAR.PROP.POSX = 13 + 35;
  GEAR.PROP.POSY = 1;
  GEAR.PROP.SIZEX = 10;
  GEAR.PROP.COLORS_ON = true;
  GEAR.PROP.BCOLOR = COLOR_BLACK;
  GEAR.PROP.COLOR = COLOR_WHITE;
  GEAR.PROP.JUSTIFICATION_LEFT = true;

  //Speed MIN Text
  SPEEDOMETER_MIN.PROP.POSX = 13 + 20;
  SPEEDOMETER_MIN.PROP.POSY = 1;
  SPEEDOMETER_MIN.PROP.SIZEX = 5;
  SPEEDOMETER_MIN.PROP.COLORS_ON = true;
  SPEEDOMETER_MIN.PROP.BCOLOR = COLOR_BLACK;
  SPEEDOMETER_MIN.PROP.COLOR = COLOR_WHITE;
  SPEEDOMETER_MIN.PROP.JUSTIFICATION_LEFT = true;

  //Speed MAN Text
  SPEEDOMETER_MAX.PROP.POSX = 13 + 42;
  SPEEDOMETER_MAX.PROP.POSY = 1;
  SPEEDOMETER_MAX.PROP.SIZEX = 5;
  SPEEDOMETER_MAX.PROP.COLORS_ON = true;
  SPEEDOMETER_MAX.PROP.BCOLOR = COLOR_BLACK;
  SPEEDOMETER_MAX.PROP.COLOR = COLOR_WHITE;
  SPEEDOMETER_MAX.PROP.JUSTIFICATION_RIGHT = true;

  //-----------

  // Speed and Gear Raw Data
  RPM_DESC.PROP.POSX = 13 + 0;
  RPM_DESC.PROP.POSY = 4;
  RPM_DESC.PROP.SIZEX = 15;
  RPM_DESC.PROP.COLORS_ON = true;
  RPM_DESC.PROP.BCOLOR = COLOR_BLACK;
  RPM_DESC.PROP.COLOR = COLOR_WHITE;
  RPM_DESC.PROP.JUSTIFICATION_LEFT = true;
  RPM_DESC.set_text("Tachometer:");

  // RPM Guage
  RPM_GUAGE.PROP.LABEL = "";
  RPM_GUAGE.PROP.INDICATOR_CHARACTER = '0';
  RPM_GUAGE.PROP.LABEL_SIZE = 0;
  RPM_GUAGE.PROP.COLOR = COLOR_WHITE;
  RPM_GUAGE.PROP.BCOLOR = COLOR_BLACK;
  RPM_GUAGE.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  RPM_GUAGE.PROP.COLOR_MARKER = COLOR_BLUE;
  RPM_GUAGE.PROP.BCOLOR_MARKER = COLOR_WHITE;
  RPM_GUAGE.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  RPM_GUAGE.PROP.POSY = 5;
  RPM_GUAGE.PROP.POSX = 13 + 0;
  RPM_GUAGE.PROP.BAR_SIZE = 45;
  RPM_GUAGE.PROP.GUAGE_BAR = true;
  RPM_GUAGE.PROP.MAX_VALUE = 4000;
  RPM_GUAGE.PROP.MIN_VALUE = 0;
  RPM_GUAGE.PROP.MIN_MAX = true;
  RPM_GUAGE.PROP.MIN_MAX_FILLER = true;
  RPM_GUAGE.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  RPM_GUAGE.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  RPM_GUAGE.PROP.MIN_MAX_INDICATORS = false;
  RPM_GUAGE.MIN_MAX_HISTORY.PROP.SLICES = 20;
  RPM_GUAGE.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  RPM_GUAGE.PROP.COLORS_ON = true;
  RPM_GUAGE.PROP.PRINT_VALUE = false;
  RPM_GUAGE.PROP.PRINT_MIN = false;
  RPM_GUAGE.PROP.PRINT_MAX = false;

  // RPM Text
  RPM.PROP.POSX = 13 + 30;
  RPM.PROP.POSY = 4;
  RPM.PROP.SIZEX = 10;
  RPM.PROP.COLORS_ON = true;
  RPM.PROP.BCOLOR = COLOR_BLACK;
  RPM.PROP.COLOR = COLOR_WHITE;
  RPM.PROP.JUSTIFICATION_LEFT = true;

  //RPM MIN Text
  RPM_MIN.PROP.POSX = 13 + 20;
  RPM_MIN.PROP.POSY = 4;
  RPM_MIN.PROP.SIZEX = 5;
  RPM_MIN.PROP.COLORS_ON = true;
  RPM_MIN.PROP.BCOLOR = COLOR_BLACK;
  RPM_MIN.PROP.COLOR = COLOR_WHITE;
  RPM_MIN.PROP.JUSTIFICATION_LEFT = true;

  //RPM MAN Text
  RPM_MAX.PROP.POSX = 13 + 42;
  RPM_MAX.PROP.POSY = 4;
  RPM_MAX.PROP.SIZEX = 5;
  RPM_MAX.PROP.COLORS_ON = true;
  RPM_MAX.PROP.BCOLOR = COLOR_BLACK;
  RPM_MAX.PROP.COLOR = COLOR_WHITE;
  RPM_MAX.PROP.JUSTIFICATION_RIGHT = true;
  
  //-----------

  // Power Load Raw Data
  POWER_LOAD_DESC.PROP.POSX = 13 + 0;
  POWER_LOAD_DESC.PROP.POSY = 7;
  POWER_LOAD_DESC.PROP.SIZEX = 15;
  POWER_LOAD_DESC.PROP.COLORS_ON = true;
  POWER_LOAD_DESC.PROP.BCOLOR = COLOR_BLACK;
  POWER_LOAD_DESC.PROP.COLOR = COLOR_WHITE;
  POWER_LOAD_DESC.PROP.JUSTIFICATION_LEFT = true;
  POWER_LOAD_DESC.set_text("Torque:");

  // Power Load Guage
  POWER_LOAD_GUAGE.PROP.LABEL = "";
  POWER_LOAD_GUAGE.PROP.INDICATOR_CHARACTER = '0';
  POWER_LOAD_GUAGE.PROP.LABEL_SIZE = 0;
  POWER_LOAD_GUAGE.PROP.COLOR = COLOR_WHITE;
  POWER_LOAD_GUAGE.PROP.BCOLOR = COLOR_BLACK;
  POWER_LOAD_GUAGE.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  POWER_LOAD_GUAGE.PROP.COLOR_MARKER = COLOR_BLUE;
  POWER_LOAD_GUAGE.PROP.BCOLOR_MARKER = COLOR_WHITE;
  POWER_LOAD_GUAGE.PROP.COLOR_MARKER_LIMIT = COLOR_RED;
  POWER_LOAD_GUAGE.PROP.POSY = 8;
  POWER_LOAD_GUAGE.PROP.POSX = 13 + 0;
  POWER_LOAD_GUAGE.PROP.BAR_SIZE = 45;
  POWER_LOAD_GUAGE.PROP.GUAGE_BAR = true;
  POWER_LOAD_GUAGE.PROP.MAX_VALUE = 300;
  POWER_LOAD_GUAGE.PROP.MIN_VALUE = 0;
  POWER_LOAD_GUAGE.PROP.MIN_MAX = true;
  POWER_LOAD_GUAGE.PROP.MIN_MAX_FILLER = true;
  POWER_LOAD_GUAGE.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  POWER_LOAD_GUAGE.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  POWER_LOAD_GUAGE.PROP.MIN_MAX_INDICATORS = false;
  POWER_LOAD_GUAGE.MIN_MAX_HISTORY.PROP.SLICES = 20;
  POWER_LOAD_GUAGE.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  POWER_LOAD_GUAGE.PROP.COLORS_ON = true;
  POWER_LOAD_GUAGE.PROP.COLORS_ON = true;
  POWER_LOAD_GUAGE.PROP.PRINT_VALUE = false;
  POWER_LOAD_GUAGE.PROP.PRINT_MIN = false;
  POWER_LOAD_GUAGE.PROP.PRINT_MAX = false;

  // Power Load Text
  POWER_LOAD.PROP.POSX = 13 + 30;
  POWER_LOAD.PROP.POSY = 7;
  POWER_LOAD.PROP.SIZEX = 5;
  POWER_LOAD.PROP.COLORS_ON = true;
  POWER_LOAD.PROP.BCOLOR = COLOR_BLACK;
  POWER_LOAD.PROP.COLOR = COLOR_WHITE;
  POWER_LOAD.PROP.JUSTIFICATION_LEFT = true;

  //Power Load MIN Text
  POWER_LOAD_MIN.PROP.POSX = 13 + 20;
  POWER_LOAD_MIN.PROP.POSY = 7;
  POWER_LOAD_MIN.PROP.SIZEX = 5;
  POWER_LOAD_MIN.PROP.COLORS_ON = true;
  POWER_LOAD_MIN.PROP.BCOLOR = COLOR_BLACK;
  POWER_LOAD_MIN.PROP.COLOR = COLOR_WHITE;
  POWER_LOAD_MIN.PROP.JUSTIFICATION_LEFT = true;

  //Power Load MAN Text
  POWER_LOAD_MAX.PROP.POSX = 13 + 42;
  POWER_LOAD_MAX.PROP.POSY = 7;
  POWER_LOAD_MAX.PROP.SIZEX = 5;
  POWER_LOAD_MAX.PROP.COLORS_ON = true;
  POWER_LOAD_MAX.PROP.BCOLOR = COLOR_BLACK;
  POWER_LOAD_MAX.PROP.COLOR = COLOR_WHITE;
  POWER_LOAD_MAX.PROP.JUSTIFICATION_RIGHT = true;

  //-----------

  // Steering Wheel Raw Data
  STEERING_WHEEL_DESC.PROP.POSX = 13 + 0;
  STEERING_WHEEL_DESC.PROP.POSY = 10;
  STEERING_WHEEL_DESC.PROP.SIZEX = 15;
  STEERING_WHEEL_DESC.PROP.COLORS_ON = true;
  STEERING_WHEEL_DESC.PROP.BCOLOR = COLOR_BLACK;
  STEERING_WHEEL_DESC.PROP.COLOR = COLOR_WHITE;
  STEERING_WHEEL_DESC.PROP.JUSTIFICATION_LEFT = true;
  STEERING_WHEEL_DESC.set_text("Steering Wheel:");

  // Steering Wheel Guage
  STEERING_WHEEL.PROP.LABEL = "";
  STEERING_WHEEL.PROP.INDICATOR_CHARACTER = '0';
  STEERING_WHEEL.PROP.LABEL_SIZE = 0;
  STEERING_WHEEL.PROP.COLOR = COLOR_WHITE;
  STEERING_WHEEL.PROP.BCOLOR = COLOR_BLACK;
  STEERING_WHEEL.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  STEERING_WHEEL.PROP.COLOR_MARKER = COLOR_BLUE;
  STEERING_WHEEL.PROP.BCOLOR_MARKER = COLOR_WHITE;
  STEERING_WHEEL.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  STEERING_WHEEL.PROP.POSY = 11;
  STEERING_WHEEL.PROP.POSX = 13 + 0;
  STEERING_WHEEL.PROP.BAR_SIZE = 45;
  STEERING_WHEEL.PROP.GUAGE_BAR = true;
  STEERING_WHEEL.PROP.MAX_VALUE = 180;
  STEERING_WHEEL.PROP.MIN_VALUE = 0;
  STEERING_WHEEL.PROP.MIN_MAX = true;
  STEERING_WHEEL.PROP.MIN_MAX_FILLER = true;
  STEERING_WHEEL.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  STEERING_WHEEL.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  STEERING_WHEEL.PROP.MIN_MAX_INDICATORS = false;
  STEERING_WHEEL.MIN_MAX_HISTORY.PROP.SLICES = 20;
  STEERING_WHEEL.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  STEERING_WHEEL.PROP.COLORS_ON = true;

  // Steering Wheel Angle Text
  STEERING_WHEEL_ANGLE.PROP.POSX = 13 + 30;
  STEERING_WHEEL_ANGLE.PROP.POSY = 10;
  STEERING_WHEEL_ANGLE.PROP.SIZEX = 20;
  STEERING_WHEEL_ANGLE.PROP.COLORS_ON = true;
  STEERING_WHEEL_ANGLE.PROP.BCOLOR = COLOR_BLACK;
  STEERING_WHEEL_ANGLE.PROP.COLOR = COLOR_WHITE;
  STEERING_WHEEL_ANGLE.PROP.JUSTIFICATION_LEFT = true;

  //-----------

  //-----------

  // Raw Data
  AD_D0.PROP.POSX = 0;
  AD_D0.PROP.POSY = 19;
  AD_D0.PROP.SIZEX = 50;
  AD_D0.PROP.COLORS_ON = true;
  AD_D0.PROP.BCOLOR = COLOR_BLACK;
  AD_D0.PROP.COLOR = COLOR_WHITE;
  AD_D0.PROP.JUSTIFICATION_LEFT = true;

  AD_130.PROP.POSX = 0;
  AD_130.PROP.POSY = 20;
  AD_130.PROP.SIZEX = 50;
  AD_130.PROP.COLORS_ON = true;
  AD_130.PROP.BCOLOR = COLOR_BLACK;
  AD_130.PROP.COLOR = COLOR_WHITE;
  AD_130.PROP.JUSTIFICATION_LEFT = true;

  AD_200.PROP.POSX = 0;
  AD_200.PROP.POSY = 21;
  AD_200.PROP.SIZEX = 50;
  AD_200.PROP.COLORS_ON = true;
  AD_200.PROP.BCOLOR = COLOR_BLACK;
  AD_200.PROP.COLOR = COLOR_WHITE;
  AD_200.PROP.JUSTIFICATION_LEFT = true;

  AD_218.PROP.POSX = 0;
  AD_218.PROP.POSY = 23;
  AD_218.PROP.SIZEX = 50;
  AD_218.PROP.COLORS_ON = true;
  AD_218.PROP.BCOLOR = COLOR_BLACK;
  AD_218.PROP.COLOR = COLOR_WHITE;
  AD_218.PROP.JUSTIFICATION_LEFT = true;

  AD_C0.PROP.POSX = 0;
  AD_C0.PROP.POSY = 24;
  AD_C0.PROP.SIZEX = 50;
  AD_C0.PROP.COLORS_ON = true;
  AD_C0.PROP.BCOLOR = COLOR_BLACK;
  AD_C0.PROP.COLOR = COLOR_WHITE;
  AD_C0.PROP.JUSTIFICATION_LEFT = true;

}

void AUTOMOBILE_GADGET::update(system_data &sdSysData, unsigned long &tmeCurrentMillis)
{  
  //--

  MESSAGES.set_text(to_string(sdSysData.CAR_INFO.message_count));

  AD_UNKNOWN.set_text(sdSysData.CAR_INFO.DATA.AD_UNKNOWN.ORIG);

  //-----------
  // Large Velocity
  
  LARGE_SPEED_1.set_text(NUMBERS_5X5.number(get_1_pos_of_int((int)sdSysData.CAR_INFO.STATUS.SPEED.val_mph())), tmeCurrentMillis);
  LARGE_SPEED_10.set_text(NUMBERS_5X5.number(get_2_pos_of_int((int)sdSysData.CAR_INFO.STATUS.SPEED.val_mph())), tmeCurrentMillis);

  //-----------
  // Large Velocity
  
  LARGE_GEAR_1.set_text(NUMBERS_5X5.number(sdSysData.CAR_INFO.STATUS.GEAR.reported()), tmeCurrentMillis);

  //-----------

  SPEEDOMETER.update(sdSysData.CAR_INFO.STATUS.SPEED.val_mph(), tmeCurrentMillis);
  SPEED.set_text(sdSysData.CAR_INFO.STATUS.SPEED.mph());
  GEAR.set_text(sdSysData.CAR_INFO.STATUS.GEAR.long_desc());
  SPEEDOMETER_MIN.set_text(to_string(SPEEDOMETER.MIN_MAX_HISTORY.min()));
  SPEEDOMETER_MAX.set_text(to_string(SPEEDOMETER.MIN_MAX_HISTORY.max()));

  //-----------

  RPM_GUAGE.update(sdSysData.CAR_INFO.STATUS.RPM.val_rpm(), tmeCurrentMillis);
  RPM.set_text(sdSysData.CAR_INFO.STATUS.RPM.rpm());
  RPM_MIN.set_text(to_string(RPM_GUAGE.MIN_MAX_HISTORY.min()));
  RPM_MAX.set_text(to_string(RPM_GUAGE.MIN_MAX_HISTORY.max()));

  //-----------

  POWER_LOAD_GUAGE.update(sdSysData.CAR_INFO.STATUS.POWER.val_load(), tmeCurrentMillis);
  POWER_LOAD.set_text(sdSysData.CAR_INFO.STATUS.POWER.load());
  POWER_LOAD_MIN.set_text(to_string(POWER_LOAD_GUAGE.MIN_MAX_HISTORY.min()));
  POWER_LOAD_MAX.set_text(to_string(POWER_LOAD_GUAGE.MIN_MAX_HISTORY.max()));

  //-----------
  STEERING_WHEEL.update(sdSysData.CAR_INFO.STATUS.STEERING.val_steering_wheel_angle(), tmeCurrentMillis);
  STEERING_WHEEL_ANGLE.set_text(sdSysData.CAR_INFO.STATUS.STEERING.left_of_center() + " " + 
                                  sdSysData.CAR_INFO.STATUS.STEERING.turning_direction() + " " + 
                                  sdSysData.CAR_INFO.STATUS.STEERING.steering_wheel_angle());
  //-----------


  //-----------

  AD_D0.set_text("Gear: " + sdSysData.CAR_INFO.DATA.AD_D0.ORIG);
  AD_130.set_text("Sped: " + sdSysData.CAR_INFO.DATA.AD_130.ORIG);
  AD_200.set_text("Cons: " + sdSysData.CAR_INFO.DATA.AD_200.ORIG + " " + 
                                    sdSysData.CAR_INFO.STATUS.FUEL.consumed());
  AD_218.set_text("Odom: " + sdSysData.CAR_INFO.DATA.AD_218.ORIG);
  AD_C0.set_text("Fuel: " + sdSysData.CAR_INFO.DATA.AD_C0.ORIG + " " + 
                                    sdSysData.CAR_INFO.STATUS.FUEL.percentage());

  //-----------

  sdSysData.CAR_INFO.CHANGED = false;
  CHANGED = true;
}

bool AUTOMOBILE_GADGET::draw(bool Refresh, unsigned long tmeFrame_Time)
{
  if (CHANGED == false)
  {

  }

  MESSAGES.draw(AUTOMOBILE_PANEL, Refresh);

  AD_UNKNOWN.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------
  // Large Velocity
  LARGE_SPEED_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  LARGE_SPEED_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  LARGE_SPEED_10.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Large Gear
  LARGE_GEAR_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  LARGE_GEAR_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Speedometer and Gear
  SPEEDOMETER_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  SPEEDOMETER.draw(AUTOMOBILE_PANEL, Refresh);
  SPEED.draw(AUTOMOBILE_PANEL, Refresh);
  GEAR.draw(AUTOMOBILE_PANEL, Refresh);
  SPEEDOMETER_MIN.draw(AUTOMOBILE_PANEL, Refresh);
  SPEEDOMETER_MAX.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------

  RPM_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  RPM_GUAGE.draw(AUTOMOBILE_PANEL, Refresh);
  RPM.draw(AUTOMOBILE_PANEL, Refresh);
  RPM_MIN.draw(AUTOMOBILE_PANEL, Refresh);
  RPM_MAX.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------

  POWER_LOAD_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  POWER_LOAD_GUAGE.draw(AUTOMOBILE_PANEL, Refresh);
  POWER_LOAD.draw(AUTOMOBILE_PANEL, Refresh);
  POWER_LOAD_MIN.draw(AUTOMOBILE_PANEL, Refresh);
  POWER_LOAD_MAX.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------

  STEERING_WHEEL_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  STEERING_WHEEL.draw(AUTOMOBILE_PANEL, Refresh);
  STEERING_WHEEL_ANGLE.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------



  //-----------


  //-----------

  AD_D0.draw(AUTOMOBILE_PANEL, Refresh);
  AD_130.draw(AUTOMOBILE_PANEL, Refresh);
  AD_200.draw(AUTOMOBILE_PANEL, Refresh);
  AD_218.draw(AUTOMOBILE_PANEL, Refresh);
  AD_C0.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------

  //-----------

  AUTOMOBILE_PANEL.draw(Refresh);

  CHANGED = false;
  return false;
}


#endif