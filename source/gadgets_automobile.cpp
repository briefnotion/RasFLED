// ***************************************************************************************
// *
// *    Core       | Everything within this document is proprietary to Core Dynamics.
// *    Dynamics   | Any unauthorized duplication will be subject to prosecution.
// *
// *    Department : (R+D)^2                        Name: gadgets_automobile.cpp
// *       Sub Dept: Programming
// *    Location ID: 856-45B
// *                                                      (c) 2856 - 2858 Core Dynamics
// ***************************************************************************************

#ifndef GADGETS_AUTOMOBILE_CPP
#define GADGETS_AUTOMOBILE_CPP

#include "gadgets_automobile.h"

using namespace std;

// -------------------------------------------------------------------------------------
//  Automobile Panel Class

void AUTOMOBILE_OVERVIEW_GADGET::create()
{
  // Build Display Window
  GADGET_PANEL.PROP.SIZEY = PROP.SIZEY;
  GADGET_PANEL.PROP.SIZEX = PROP.SIZEX;
  GADGET_PANEL.PROP.POSY = PROP.POSY;
  GADGET_PANEL.PROP.POSX = PROP.POSX;
  GADGET_PANEL.PROP.COLOR = COLOR_WHITE;
  GADGET_PANEL.PROP.BCOLOR = COLOR_BLACK;

  GADGET_PANEL.create();

  //-----------
  // Car Body
  SYMBOL_CAR_BODY.PROP.POSX = 7;
  SYMBOL_CAR_BODY.PROP.POSY = 2;
  SYMBOL_CAR_BODY.PROP.SIZEX = 22;
  SYMBOL_CAR_BODY.PROP.SIZEY = 18;
  SYMBOL_CAR_BODY.PROP.COLORS_ON = true;
  SYMBOL_CAR_BODY.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_BODY.PROP.JUSTIFICATION_LEFT = true;
  SYMBOL_CAR_BODY.set_text(CAR_SYMBOLS.car_body());

  //-----------
  // Car Lights
  SYMBOL_CAR_LIGHTS.PROP.POSX = 8;
  SYMBOL_CAR_LIGHTS.PROP.POSY = 1;
  SYMBOL_CAR_LIGHTS.PROP.SIZEX = 13;
  SYMBOL_CAR_LIGHTS.PROP.SIZEY = 2;
  SYMBOL_CAR_LIGHTS.PROP.COLORS_ON = true;
  //SYMBOL_CAR_LIGHTS.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_LIGHTS.PROP.JUSTIFICATION_LEFT = true;
  //SYMBOL_CAR_LIGHTS.set_text(CAR_SYMBOLS.car_lights_off());

  //-----------
  // Car Parking Lights
  PARKING_LIGHT_LF.PROP.POSX = 8;
  PARKING_LIGHT_LF.PROP.POSY = 3;
  PARKING_LIGHT_LF.PROP.SIZEX = 2;
  PARKING_LIGHT_LF.PROP.COLORS_ON = true;
  PARKING_LIGHT_LF.PROP.JUSTIFICATION_LEFT = true;
  PARKING_LIGHT_LF.set_text("  ");

  PARKING_LIGHT_RF.PROP.POSX = 19;
  PARKING_LIGHT_RF.PROP.POSY = 3;
  PARKING_LIGHT_RF.PROP.SIZEX = 2;
  PARKING_LIGHT_RF.PROP.COLORS_ON = true;
  PARKING_LIGHT_RF.PROP.JUSTIFICATION_LEFT = true;
  PARKING_LIGHT_RF.set_text("  ");

  PARKING_LIGHT_LB.PROP.POSX = 8;
  PARKING_LIGHT_LB.PROP.POSY = 19;
  PARKING_LIGHT_LB.PROP.SIZEX = 2;
  PARKING_LIGHT_LB.PROP.COLORS_ON = true;
  PARKING_LIGHT_LB.PROP.JUSTIFICATION_LEFT = true;
  PARKING_LIGHT_LB.set_text("  ");

  PARKING_LIGHT_RB.PROP.POSX = 19;
  PARKING_LIGHT_RB.PROP.POSY = 19;
  PARKING_LIGHT_RB.PROP.SIZEX = 2;
  PARKING_LIGHT_RB.PROP.COLORS_ON = true;
  PARKING_LIGHT_RB.PROP.JUSTIFICATION_LEFT = true;
  PARKING_LIGHT_RB.set_text("  ");

  //-----------
  // Parking Break
  PARKING_BREAK_LEFT.PROP.POSX = 7;
  PARKING_BREAK_LEFT.PROP.POSY = 17;
  PARKING_BREAK_LEFT.PROP.SIZEX = 1;
  PARKING_BREAK_LEFT.PROP.SIZEY = 3;
  PARKING_BREAK_LEFT.PROP.COLORS_ON = true;
  PARKING_BREAK_LEFT.PROP.UPDATE_INDICATION = true;
  //PARKING_BREAK_LEFT.set_color(COLOR_RED, COLOR_WHITE);
  PARKING_BREAK_LEFT.PROP.JUSTIFICATION_LEFT = true;
  //PARKING_BREAK_LEFT.set_text("B\nR\nK");
  
  PARKING_BREAK_RIGHT.PROP.POSX = 21;
  PARKING_BREAK_RIGHT.PROP.POSY = 17;
  PARKING_BREAK_RIGHT.PROP.SIZEX = 1;
  PARKING_BREAK_RIGHT.PROP.SIZEY = 3;
  PARKING_BREAK_RIGHT.PROP.COLORS_ON = true;
  PARKING_BREAK_RIGHT.PROP.UPDATE_INDICATION = true;
  //PARKING_BREAK_RIGHT.set_color(COLOR_RED, COLOR_WHITE);
  PARKING_BREAK_RIGHT.PROP.JUSTIFICATION_LEFT = true;
  //PARKING_BREAK_RIGHT.set_text("B\nR\nK");

  //-----------
  // Car Doors
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.POSX = 3;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.POSY = 2 + 6;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.UPDATE_INDICATION = true;
  //SYMBOL_CAR_DOOR_LEFT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_LEFT_FRONT.PROP.JUSTIFICATION_LEFT = true;

  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.POSX = 3;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.POSY = 2 + 11;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.UPDATE_INDICATION = true;
  //SYMBOL_CAR_DOOR_LEFT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_LEFT_BACK.PROP.JUSTIFICATION_LEFT = true;

  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.POSX = 3 + 17;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.POSY = 2 + 6;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.UPDATE_INDICATION = true;
  //SYMBOL_CAR_DOOR_RIGHT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_RIGHT_FRONT.PROP.JUSTIFICATION_LEFT = true;

  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.POSX = 3 + 17;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.POSY = 2 + 11;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.SIZEX = 6;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.SIZEY = 4;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.COLORS_ON = true;
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.UPDATE_INDICATION = true;
  //SYMBOL_CAR_DOOR_RIGHT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
  SYMBOL_CAR_DOOR_RIGHT_BACK.PROP.JUSTIFICATION_LEFT = true;
  
  //-----------
  // Gear Selection Values
  GEAR_SELECTION_PARK.PROP.POSX = 1;
  GEAR_SELECTION_PARK.PROP.POSY = 9;
  GEAR_SELECTION_PARK.PROP.SIZEX = 1;
  GEAR_SELECTION_PARK.PROP.COLORS_ON = true;
  GEAR_SELECTION_PARK.PROP.BCOLOR = COLOR_BLACK;
  GEAR_SELECTION_PARK.PROP.COLOR = COLOR_WHITE;
  GEAR_SELECTION_PARK.PROP.JUSTIFICATION_LEFT = true;
  GEAR_SELECTION_PARK.set_text("P");
  
  GEAR_SELECTION_REVERSE.PROP.POSX = 1;
  GEAR_SELECTION_REVERSE.PROP.POSY = 10;
  GEAR_SELECTION_REVERSE.PROP.SIZEX = 1;
  GEAR_SELECTION_REVERSE.PROP.COLORS_ON = true;
  GEAR_SELECTION_REVERSE.PROP.BCOLOR = COLOR_BLACK;
  GEAR_SELECTION_REVERSE.PROP.COLOR = COLOR_WHITE;
  GEAR_SELECTION_REVERSE.PROP.JUSTIFICATION_LEFT = true;
  GEAR_SELECTION_REVERSE.set_text("R");

  GEAR_SELECTION_NEUTRAL.PROP.POSX = 1;
  GEAR_SELECTION_NEUTRAL.PROP.POSY = 11;
  GEAR_SELECTION_NEUTRAL.PROP.SIZEX = 1;
  GEAR_SELECTION_NEUTRAL.PROP.COLORS_ON = true;
  GEAR_SELECTION_NEUTRAL.PROP.BCOLOR = COLOR_BLACK;
  GEAR_SELECTION_NEUTRAL.PROP.COLOR = COLOR_WHITE;
  GEAR_SELECTION_NEUTRAL.PROP.JUSTIFICATION_LEFT = true;
  GEAR_SELECTION_NEUTRAL.set_text("N");

  GEAR_SELECTION_DRIVE.PROP.POSX = 1;
  GEAR_SELECTION_DRIVE.PROP.POSY = 12;
  GEAR_SELECTION_DRIVE.PROP.SIZEX = 1;
  GEAR_SELECTION_DRIVE.PROP.COLORS_ON = true;
  GEAR_SELECTION_DRIVE.PROP.BCOLOR = COLOR_BLACK;
  GEAR_SELECTION_DRIVE.PROP.COLOR = COLOR_WHITE;
  GEAR_SELECTION_DRIVE.PROP.JUSTIFICATION_LEFT = true;
  GEAR_SELECTION_DRIVE.set_text("D");

  GEAR_SELECTION_LOW.PROP.POSX = 1;
  GEAR_SELECTION_LOW.PROP.POSY = 13;
  GEAR_SELECTION_LOW.PROP.SIZEX = 1;
  GEAR_SELECTION_LOW.PROP.COLORS_ON = true;
  GEAR_SELECTION_LOW.PROP.BCOLOR = COLOR_BLACK;
  GEAR_SELECTION_LOW.PROP.COLOR = COLOR_WHITE;
  GEAR_SELECTION_LOW.PROP.JUSTIFICATION_LEFT = true;
  GEAR_SELECTION_LOW.set_text("L");

  //-----------
  // Individual Tire Speeds

  // Tire TTL - Unfiltered
  LF_UNFILTERED_TTL.PROP.POSX = 2;
  LF_UNFILTERED_TTL.PROP.POSY = 5;
  LF_UNFILTERED_TTL.PROP.SIZEX = 5;
  LF_UNFILTERED_TTL.PROP.COLORS_ON = true;
  LF_UNFILTERED_TTL.PROP.BCOLOR = COLOR_BLACK;
  LF_UNFILTERED_TTL.PROP.COLOR = COLOR_BLACK;
  LF_UNFILTERED_TTL.PROP.JUSTIFICATION_LEFT = true;
  LF_UNFILTERED_TTL.PROP.AUTO_COLOR = true;

  RF_UNFILTERED_TTL.PROP.POSX = 24;
  RF_UNFILTERED_TTL.PROP.POSY = 5;
  RF_UNFILTERED_TTL.PROP.SIZEX = 5;
  RF_UNFILTERED_TTL.PROP.COLORS_ON = true;
  RF_UNFILTERED_TTL.PROP.BCOLOR = COLOR_BLACK;
  RF_UNFILTERED_TTL.PROP.COLOR = COLOR_BLACK;
  RF_UNFILTERED_TTL.PROP.JUSTIFICATION_LEFT = true;
  RF_UNFILTERED_TTL.PROP.AUTO_COLOR = true;

  LB_UNFILTERED_TTL.PROP.POSX = 2;
  LB_UNFILTERED_TTL.PROP.POSY = 18;
  LB_UNFILTERED_TTL.PROP.SIZEX = 5;
  LB_UNFILTERED_TTL.PROP.COLORS_ON = true;
  LB_UNFILTERED_TTL.PROP.BCOLOR = COLOR_BLACK;
  LB_UNFILTERED_TTL.PROP.COLOR = COLOR_BLACK;
  LB_UNFILTERED_TTL.PROP.JUSTIFICATION_LEFT = true;
  LB_UNFILTERED_TTL.PROP.AUTO_COLOR = true;

  RB_UNFILTERED_TTL.PROP.POSX = 24;
  RB_UNFILTERED_TTL.PROP.POSY = 18;
  RB_UNFILTERED_TTL.PROP.SIZEX = 5;
  RB_UNFILTERED_TTL.PROP.COLORS_ON = true;
  RB_UNFILTERED_TTL.PROP.BCOLOR = COLOR_BLACK;
  RB_UNFILTERED_TTL.PROP.COLOR = COLOR_BLACK;
  RB_UNFILTERED_TTL.PROP.JUSTIFICATION_LEFT = true;
  RB_UNFILTERED_TTL.PROP.AUTO_COLOR = true;

  // Data Fill;
  LF_UNFILTERED_TTL_DATA_FILL.PROP.POSX = 1;
  LF_UNFILTERED_TTL_DATA_FILL.PROP.POSY = 5;

  RF_UNFILTERED_TTL_DATA_FILL.PROP.POSX = 23;
  RF_UNFILTERED_TTL_DATA_FILL.PROP.POSY = 5;

  LB_UNFILTERED_TTL_DATA_FILL.PROP.POSX = 1;
  LB_UNFILTERED_TTL_DATA_FILL.PROP.POSY = 18;

  RB_UNFILTERED_TTL_DATA_FILL.PROP.POSX = 23;
  RB_UNFILTERED_TTL_DATA_FILL.PROP.POSY = 18;

  // Tire TTL
  LF_TTL.PROP.POSX = 2;
  LF_TTL.PROP.POSY = 6;
  LF_TTL.PROP.SIZEX = 5;
  LF_TTL.PROP.COLORS_ON = true;
  LF_TTL.PROP.BCOLOR = COLOR_BLACK;
  LF_TTL.PROP.COLOR = COLOR_BLACK;
  LF_TTL.PROP.JUSTIFICATION_LEFT = true;
  LF_TTL.PROP.AUTO_COLOR = true;

  RF_TTL.PROP.POSX = 24;
  RF_TTL.PROP.POSY = 6;
  RF_TTL.PROP.SIZEX = 5;
  RF_TTL.PROP.COLORS_ON = true;
  RF_TTL.PROP.BCOLOR = COLOR_BLACK;
  RF_TTL.PROP.COLOR = COLOR_BLACK;
  RF_TTL.PROP.JUSTIFICATION_LEFT = true;
  RF_TTL.PROP.AUTO_COLOR = true;

  LB_TTL.PROP.POSX = 2;
  LB_TTL.PROP.POSY = 19;
  LB_TTL.PROP.SIZEX = 5;
  LB_TTL.PROP.COLORS_ON = true;
  LB_TTL.PROP.BCOLOR = COLOR_BLACK;
  LB_TTL.PROP.COLOR = COLOR_BLACK;
  LB_TTL.PROP.JUSTIFICATION_LEFT = true;
  LB_TTL.PROP.AUTO_COLOR = true;

  RB_TTL.PROP.POSX = 24;
  RB_TTL.PROP.POSY = 19;
  RB_TTL.PROP.SIZEX = 5;
  RB_TTL.PROP.COLORS_ON = true;
  RB_TTL.PROP.BCOLOR = COLOR_BLACK;
  RB_TTL.PROP.COLOR = COLOR_BLACK;
  RB_TTL.PROP.JUSTIFICATION_LEFT = true;
  RB_TTL.PROP.AUTO_COLOR = true;

  // Data Fill;
  LF_TTL_DATA_FILL.PROP.POSX = 1;
  LF_TTL_DATA_FILL.PROP.POSY = 6;

  RF_TTL_DATA_FILL.PROP.POSX = 23;
  RF_TTL_DATA_FILL.PROP.POSY = 6;

  LB_TTL_DATA_FILL.PROP.POSX = 1;
  LB_TTL_DATA_FILL.PROP.POSY = 19;

  RB_TTL_DATA_FILL.PROP.POSX = 23;
  RB_TTL_DATA_FILL.PROP.POSY = 19;

  //-----------
  LIGHTS_STATUS.PROP.POSX = 3;
  LIGHTS_STATUS.PROP.POSY = 21;
  LIGHTS_STATUS.PROP.SIZEX = 20;
  LIGHTS_STATUS.PROP.COLORS_ON = true;
  //LIGHTS_STATUS.PROP.BCOLOR = COLOR_BLACK;
  //LIGHTS_STATUS.PROP.COLOR = COLOR_WHITE;
  LIGHTS_STATUS.PROP.UPDATE_INDICATION = true;
  LIGHTS_STATUS.PROP.JUSTIFICATION_LEFT = true;
  
  FUEL_LEVEL.PROP.POSX = 3;
  FUEL_LEVEL.PROP.POSY = 22;
  FUEL_LEVEL.PROP.SIZEX = 20;
  FUEL_LEVEL.PROP.COLORS_ON = true;
  //FUEL_LEVEL.PROP.BCOLOR = COLOR_BLACK;
  //FUEL_LEVEL.PROP.COLOR = COLOR_WHITE;
  FUEL_LEVEL.PROP.JUSTIFICATION_LEFT = true;
  
  CRUIS_CONTROL.PROP.POSX = 3;
  CRUIS_CONTROL.PROP.POSY = 23;
  CRUIS_CONTROL.PROP.SIZEX = 20;
  CRUIS_CONTROL.PROP.COLORS_ON = true;
  CRUIS_CONTROL.PROP.BCOLOR = COLOR_BLACK;
  CRUIS_CONTROL.PROP.COLOR = COLOR_WHITE;
  CRUIS_CONTROL.PROP.JUSTIFICATION_LEFT = true;
}

void AUTOMOBILE_OVERVIEW_GADGET::update(system_data &sdSysData, unsigned long &tmeCurrentMillis)
{
  TRUTH_CATCH door_changed;

  // Update Headlight Indicators
  if (set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.INDICATORS.val_lights_headlights_on(), LIGHTS_HEADLIGHT_VAL) == true)
  {
    if (LIGHTS_HEADLIGHT_VAL == true)
    {
      SYMBOL_CAR_LIGHTS.set_text(CAR_SYMBOLS.car_lights_on());
    }
    else
    {
      SYMBOL_CAR_LIGHTS.set_text(CAR_SYMBOLS.car_lights_off());
    }
  }

  // Set Color of Head Lights
  if (LIGHTS_HEADLIGHT_VAL == true)
  {
    if (sdSysData.CAR_INFO.STATUS.INDICATORS.val_lights_high_beam_on() == true)
    {
      SYMBOL_CAR_LIGHTS.set_color(COLOR_BLUE, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_LIGHTS.set_color(COLOR_WHITE, COLOR_BLACK);
    }
  }
  else
  {
    SYMBOL_CAR_LIGHTS.set_color(COLOR_BLACK, COLOR_WHITE);
  }

  // Update Parking Lights Indicators
  if (set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.INDICATORS.val_lights_parking_on(), LIGHTS_PARKING_LIGHTS_VAL) == true)
  {
    if (LIGHTS_PARKING_LIGHTS_VAL == true)
    {
      PARKING_LIGHT_LF.set_color(COLOR_YELLOW, COLOR_WHITE);
      PARKING_LIGHT_RF.set_color(COLOR_YELLOW, COLOR_WHITE);
      PARKING_LIGHT_LB.set_color(COLOR_RED, COLOR_WHITE);
      PARKING_LIGHT_RB.set_color(COLOR_RED, COLOR_WHITE);
    }
    else
    {
      PARKING_LIGHT_LF.set_color(COLOR_BLACK, COLOR_WHITE);
      PARKING_LIGHT_RF.set_color(COLOR_BLACK, COLOR_WHITE);
      PARKING_LIGHT_LB.set_color(COLOR_BLACK, COLOR_WHITE);
      PARKING_LIGHT_RB.set_color(COLOR_BLACK, COLOR_WHITE);
    }
  }

  // Update Parking Brake Indicators
  if (set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.INDICATORS.val_parking_brake(), PARKING_BREAK_VAL) == true)
  {
    if (PARKING_BREAK_VAL == true)
    {
      PARKING_BREAK_LEFT.set_color(COLOR_RED, COLOR_WHITE);
      PARKING_BREAK_RIGHT.set_color(COLOR_RED, COLOR_WHITE);
      PARKING_BREAK_LEFT.set_text("B\nR\nK");
      PARKING_BREAK_RIGHT.set_text("B\nR\nK");
    }
    else
    {
      PARKING_BREAK_LEFT.set_color(COLOR_BLACK, COLOR_WHITE);
      PARKING_BREAK_RIGHT.set_color(COLOR_BLACK, COLOR_WHITE);
      PARKING_BREAK_LEFT.set_text(" \n \n ");
      PARKING_BREAK_RIGHT.set_text(" \n \n ");
    }
  }

  // Update Door Information

  // Get value
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.DOORS.lb_door_open(), LEFT_BACK_DOOR_VAL));
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.DOORS.lf_door_open(), LEFT_FRONT_DOOR_VAL));
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.DOORS.rb_door_open(), RIGHT_BACK_DOOR_VAL));
  door_changed.catch_truth(set_bool_with_change_notify(sdSysData.CAR_INFO.STATUS.DOORS.rf_door_open(), RIGHT_FRONT_DOOR_VAL));

  if (door_changed.has_truth() == true)
  {
    // Set value of all doors regardless which changed.

    // Left Front
    if (LEFT_FRONT_DOOR_VAL == true)
    //if (true == true)
    {
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_text(CAR_SYMBOLS.car_door_left_open(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_text(CAR_SYMBOLS.car_door_left_front_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
    }

    // Right Front
    if (RIGHT_FRONT_DOOR_VAL == true)
    {
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_text(CAR_SYMBOLS.car_door_right_open(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_text(CAR_SYMBOLS.car_door_right_front_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_RIGHT_FRONT.set_color(COLOR_BLACK, COLOR_WHITE);
    }

    // Left Back
    if (LEFT_BACK_DOOR_VAL == true)
    {
      SYMBOL_CAR_DOOR_LEFT_BACK.set_text(CAR_SYMBOLS.car_door_left_open(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_BACK.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_LEFT_BACK.set_text(CAR_SYMBOLS.car_door_left_back_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_LEFT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
    }

    // Right Back
    if (RIGHT_BACK_DOOR_VAL == true)
    {
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_text(CAR_SYMBOLS.car_door_right_open()), tmeCurrentMillis;
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_color(COLOR_YELLOW, COLOR_WHITE);
    }
    else
    {
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_text(CAR_SYMBOLS.car_door_right_back_closed(), tmeCurrentMillis);
      SYMBOL_CAR_DOOR_RIGHT_BACK.set_color(COLOR_BLACK, COLOR_WHITE);
    }
  }

  //-----------
  // Gear Selection
  GEAR_SELECTION_PARK.set_inverse(sdSysData.CAR_INFO.STATUS.GEAR.gear_selection_park());
  GEAR_SELECTION_REVERSE.set_inverse(sdSysData.CAR_INFO.STATUS.GEAR.gear_selection_reverse());
  GEAR_SELECTION_NEUTRAL.set_inverse(sdSysData.CAR_INFO.STATUS.GEAR.gear_selection_neutral());
  GEAR_SELECTION_DRIVE.set_inverse(sdSysData.CAR_INFO.STATUS.GEAR.gear_selection_drive());
  GEAR_SELECTION_LOW.set_inverse(sdSysData.CAR_INFO.STATUS.GEAR.gear_selection_low());

  //-----------

  // Unfiltered TTL Percentage
  LF_UNFILTERED_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LF_TTL.life_percentage_mean());
  LF_UNFILTERED_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LF_TTL.val_life_percentage_mean(), 0, 10, 75, 100, 200 ), COLOR_BLACK);
  RF_UNFILTERED_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RF_TTL.life_percentage_mean());
  RF_UNFILTERED_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RF_TTL.val_life_percentage_mean(), 0, 10, 75, 100, 200 ), COLOR_BLACK);
  LB_UNFILTERED_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LB_TTL.life_percentage_mean());
  LB_UNFILTERED_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LB_TTL.val_life_percentage_mean(), 0, 10, 75, 100, 200 ), COLOR_BLACK);
  RB_UNFILTERED_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RB_TTL.life_percentage_mean());
  RB_UNFILTERED_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RB_TTL.val_life_percentage_mean(), 0, 10, 75, 100, 200 ), COLOR_BLACK);

  LF_UNFILTERED_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LF_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LF_TTL.slice_size_max(), tmeCurrentMillis);
  RF_UNFILTERED_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RF_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RF_TTL.slice_size_max(), tmeCurrentMillis);
  LB_UNFILTERED_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LB_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_LB_TTL.slice_size_max(), tmeCurrentMillis);
  RB_UNFILTERED_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RB_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.UNFILTHERED_RB_TTL.slice_size_max(), tmeCurrentMillis);

  // TTL Percentage
  LF_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.LF_TTL.life_percentage_mean());
  LF_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.LF_TTL.val_life_percentage_mean(), 0, 20, 75, 100, 200 ), COLOR_BLACK);
  RF_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.RF_TTL.life_percentage_mean());
  RF_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.RF_TTL.val_life_percentage_mean(), 0, 20, 75, 100, 200 ), COLOR_BLACK);
  LB_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.LB_TTL.life_percentage_mean());
  LB_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.LB_TTL.val_life_percentage_mean(), 0, 20, 75, 100, 200 ), COLOR_BLACK);
  RB_TTL.set_text(" " + sdSysData.CAR_INFO.CALCULATED.RB_TTL.life_percentage_mean());
  RB_TTL.set_color(  color_range(sdSysData.CAR_INFO.CALCULATED.RB_TTL.val_life_percentage_mean(), 0, 20, 75, 100, 200 ), COLOR_BLACK);

  LF_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.LF_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.LF_TTL.slice_size_max(), tmeCurrentMillis);
  RF_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.RF_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.RF_TTL.slice_size_max(), tmeCurrentMillis);
  LB_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.LB_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.LB_TTL.slice_size_max(), tmeCurrentMillis);
  RB_TTL_DATA_FILL.set_value(sdSysData.CAR_INFO.CALCULATED.RB_TTL.slice_size(), 0, sdSysData.CAR_INFO.CALCULATED.RB_TTL.slice_size_max(), tmeCurrentMillis);
  
  //-----------
  // Status

  LIGHTS_STATUS.set_text("LIGHTS: " + sdSysData.CAR_INFO.STATUS.INDICATORS.lights_switch(), tmeCurrentMillis);
  if (sdSysData.CAR_INFO.STATUS.INDICATORS.val_lights_high_beam_on() == false)
  {
    LIGHTS_STATUS.set_color(COLOR_BLACK, COLOR_WHITE);
  }
  else
  {
    LIGHTS_STATUS.set_color(COLOR_BLUE, COLOR_WHITE);
  }

  FUEL_LEVEL.set_text("  FUEL: " + sdSysData.CAR_INFO.STATUS.FUEL.level(), tmeCurrentMillis);
  CRUIS_CONTROL.set_text("CRUISE: " + to_string((int)sdSysData.CAR_INFO.STATUS.INDICATORS.cruise_control_speed()), tmeCurrentMillis);
  CRUIS_CONTROL.set_inverse(sdSysData.CAR_INFO.STATUS.INDICATORS.cruise_control());

  if (sdSysData.CAR_INFO.STATUS.FUEL.val_level() >= 4)
  {
    FUEL_LEVEL.set_color(COLOR_BLACK, COLOR_WHITE);
  }
  else if (sdSysData.CAR_INFO.STATUS.FUEL.val_level() >= 1 && sdSysData.CAR_INFO.STATUS.FUEL.val_level() < 4)
  {
    FUEL_LEVEL.set_color(COLOR_YELLOW, COLOR_BLACK);
  }
  else 
  {
    FUEL_LEVEL.set_color(COLOR_RED, COLOR_WHITE);
  }

  //-----------

  CHANGED = true;
}

bool AUTOMOBILE_OVERVIEW_GADGET::draw(bool Refresh, unsigned long tmeFrame_Time)
{
  //-----------
  if (CHANGED == false)
  {

  }

  //-----------
  // Car Body
  SYMBOL_CAR_BODY.draw(GADGET_PANEL, Refresh);

  //-----------
  // Car Lights
  SYMBOL_CAR_LIGHTS.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  PARKING_LIGHT_LF.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  PARKING_LIGHT_RF.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  PARKING_LIGHT_LB.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  PARKING_LIGHT_RB.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Car Doors
  SYMBOL_CAR_DOOR_LEFT_FRONT.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  SYMBOL_CAR_DOOR_RIGHT_FRONT.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  SYMBOL_CAR_DOOR_LEFT_BACK.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  SYMBOL_CAR_DOOR_RIGHT_BACK.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Parking Break
  PARKING_BREAK_LEFT.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  PARKING_BREAK_RIGHT.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Gear Selection
  GEAR_SELECTION_PARK.draw(GADGET_PANEL, Refresh);
  GEAR_SELECTION_REVERSE.draw(GADGET_PANEL, Refresh);
  GEAR_SELECTION_NEUTRAL.draw(GADGET_PANEL, Refresh);
  GEAR_SELECTION_DRIVE.draw(GADGET_PANEL, Refresh);
  GEAR_SELECTION_LOW.draw(GADGET_PANEL, Refresh);

  //-----------
  LF_UNFILTERED_TTL.draw(GADGET_PANEL, Refresh);
  RF_UNFILTERED_TTL.draw(GADGET_PANEL, Refresh);
  LB_UNFILTERED_TTL.draw(GADGET_PANEL, Refresh);
  RB_UNFILTERED_TTL.draw(GADGET_PANEL, Refresh);
  
  LF_UNFILTERED_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);
  RF_UNFILTERED_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);
  LB_UNFILTERED_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);
  RB_UNFILTERED_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);

  LF_TTL.draw(GADGET_PANEL, Refresh);
  RF_TTL.draw(GADGET_PANEL, Refresh);
  LB_TTL.draw(GADGET_PANEL, Refresh);
  RB_TTL.draw(GADGET_PANEL, Refresh);

  LF_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);
  RF_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);
  LB_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);
  RB_TTL_DATA_FILL.draw(GADGET_PANEL, Refresh);

  //-----------
  // Status

  LIGHTS_STATUS.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  FUEL_LEVEL.draw(GADGET_PANEL, Refresh, tmeFrame_Time);
  CRUIS_CONTROL.draw(GADGET_PANEL, Refresh, tmeFrame_Time);

  //-----------
  GADGET_PANEL.draw(Refresh);

  CHANGED = false;
  return false;
}

// -------------------------------------------------------------------------------------
//  DATA_SET_GADGET

void DATA_SET_GADGET::create()
{
  DESCRIPTION.PROP.POSX = PROP.POSX + 0;
  DESCRIPTION.PROP.POSY = PROP.POSY + 0;
  DESCRIPTION.PROP.SIZEX = PROP.SIZEX;
  DESCRIPTION.PROP.COLORS_ON = true;
  DESCRIPTION.PROP.BCOLOR = COLOR_WHITE;
  DESCRIPTION.PROP.COLOR = COLOR_BLACK;
  DESCRIPTION.PROP.JUSTIFICATION_LEFT = true;
  DESCRIPTION.set_text(PROP.DESCRIPTION);

  // Bar Guages
  DATA_BAR_A.PROP.LABEL = "";
  DATA_BAR_A.PROP.INDICATOR_CHARACTER = '0';
  DATA_BAR_A.PROP.LABEL_SIZE = 0;
  DATA_BAR_A.PROP.COLOR = COLOR_WHITE;
  DATA_BAR_A.PROP.BCOLOR = COLOR_BLACK;
  DATA_BAR_A.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  DATA_BAR_A.PROP.COLOR_MARKER = COLOR_BLUE;
  DATA_BAR_A.PROP.BCOLOR_MARKER = COLOR_WHITE;
  DATA_BAR_A.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  DATA_BAR_A.PROP.POSY = PROP.POSY + 1;
  DATA_BAR_A.PROP.POSX = PROP.POSX + 0;
  DATA_BAR_A.PROP.BAR_SIZE = 11;
  DATA_BAR_A.PROP.GUAGE_BAR = true;
  DATA_BAR_A.PROP.MAX_VALUE = 255;
  DATA_BAR_A.PROP.MIN_VALUE = 0;
  DATA_BAR_A.PROP.MIN_MAX = true;
  DATA_BAR_A.PROP.MIN_MAX_FILLER = true;
  DATA_BAR_A.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  DATA_BAR_A.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  DATA_BAR_A.PROP.MIN_MAX_INDICATORS = false;
  DATA_BAR_A.MIN_MAX_HISTORY.PROP.SLICES = 20;
  DATA_BAR_A.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  DATA_BAR_A.PROP.COLORS_ON = true;
  DATA_BAR_A.PROP.PRINT_VALUE = false;
  DATA_BAR_A.PROP.PRINT_MIN = false;
  DATA_BAR_A.PROP.PRINT_MAX = false;

  DATA_BAR_B.PROP.LABEL = "";
  DATA_BAR_B.PROP.INDICATOR_CHARACTER = '0';
  DATA_BAR_B.PROP.LABEL_SIZE = 0;
  DATA_BAR_B.PROP.COLOR = COLOR_WHITE;
  DATA_BAR_B.PROP.BCOLOR = COLOR_BLACK;
  DATA_BAR_B.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  DATA_BAR_B.PROP.COLOR_MARKER = COLOR_BLUE;
  DATA_BAR_B.PROP.BCOLOR_MARKER = COLOR_WHITE;
  DATA_BAR_B.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  DATA_BAR_B.PROP.POSY = PROP.POSY + 2;
  DATA_BAR_B.PROP.POSX = PROP.POSX + 0;
  DATA_BAR_B.PROP.BAR_SIZE = 11;
  DATA_BAR_B.PROP.GUAGE_BAR = true;
  DATA_BAR_B.PROP.MAX_VALUE = 255;
  DATA_BAR_B.PROP.MIN_VALUE = 0;
  DATA_BAR_B.PROP.MIN_MAX = true;
  DATA_BAR_B.PROP.MIN_MAX_FILLER = true;
  DATA_BAR_B.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  DATA_BAR_B.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  DATA_BAR_B.PROP.MIN_MAX_INDICATORS = false;
  DATA_BAR_B.MIN_MAX_HISTORY.PROP.SLICES = 20;
  DATA_BAR_B.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  DATA_BAR_B.PROP.COLORS_ON = true;
  DATA_BAR_B.PROP.PRINT_VALUE = false;
  DATA_BAR_B.PROP.PRINT_MIN = false;
  DATA_BAR_B.PROP.PRINT_MAX = false;

  // Data
  DATA_FIELD_0.PROP.POSX = PROP.POSX + 1;
  DATA_FIELD_0.PROP.POSY = PROP.POSY + 3;
  DATA_FIELD_0.PROP.SIZEX = 2;
  DATA_FIELD_0.PROP.COLORS_ON = true;
  DATA_FIELD_0.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_0.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_0.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_0.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_1.PROP.POSX = PROP.POSX + 4;
  DATA_FIELD_1.PROP.POSY = PROP.POSY + 3;
  DATA_FIELD_1.PROP.SIZEX = 2;
  DATA_FIELD_1.PROP.COLORS_ON = true;
  DATA_FIELD_1.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_1.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_1.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_1.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_2.PROP.POSX = PROP.POSX + 7;
  DATA_FIELD_2.PROP.POSY = PROP.POSY + 3;
  DATA_FIELD_2.PROP.SIZEX = 2;
  DATA_FIELD_2.PROP.COLORS_ON = true;
  DATA_FIELD_2.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_2.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_2.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_2.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_3.PROP.POSX = PROP.POSX + 10;
  DATA_FIELD_3.PROP.POSY = PROP.POSY + 3;
  DATA_FIELD_3.PROP.SIZEX = 2;
  DATA_FIELD_3.PROP.COLORS_ON = true;
  DATA_FIELD_3.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_3.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_3.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_3.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_4.PROP.POSX = PROP.POSX + 1;
  DATA_FIELD_4.PROP.POSY = PROP.POSY + 4;
  DATA_FIELD_4.PROP.SIZEX = 2;
  DATA_FIELD_4.PROP.COLORS_ON = true;
  DATA_FIELD_4.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_4.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_4.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_4.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_5.PROP.POSX = PROP.POSX + 4;
  DATA_FIELD_5.PROP.POSY = PROP.POSY + 4;
  DATA_FIELD_5.PROP.SIZEX = 2;
  DATA_FIELD_5.PROP.COLORS_ON = true;
  DATA_FIELD_5.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_5.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_5.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_5.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_6.PROP.POSX = PROP.POSX + 7;
  DATA_FIELD_6.PROP.POSY = PROP.POSY + 4;
  DATA_FIELD_6.PROP.SIZEX = 2;
  DATA_FIELD_6.PROP.COLORS_ON = true;
  DATA_FIELD_6.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_6.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_6.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_6.PROP.UPDATE_INDICATION = true;

  DATA_FIELD_7.PROP.POSX = PROP.POSX + 10;
  DATA_FIELD_7.PROP.POSY = PROP.POSY + 4;
  DATA_FIELD_7.PROP.SIZEX = 2;
  DATA_FIELD_7.PROP.COLORS_ON = true;
  DATA_FIELD_7.PROP.BCOLOR = COLOR_BLACK;
  DATA_FIELD_7.PROP.COLOR = COLOR_WHITE;
  DATA_FIELD_7.PROP.JUSTIFICATION_LEFT = true;
  DATA_FIELD_7.PROP.UPDATE_INDICATION = true;

  // Calculation Field
  CALCULATION.PROP.POSX = PROP.POSX + 0;
  CALCULATION.PROP.POSY = PROP.POSY + 5;
  CALCULATION.PROP.SIZEX = PROP.SIZEX;
  CALCULATION.PROP.COLORS_ON = true;
  CALCULATION.PROP.BCOLOR = COLOR_BLACK;
  CALCULATION.PROP.COLOR = COLOR_WHITE;
  CALCULATION.PROP.JUSTIFICATION_LEFT = true;
  CALCULATION.PROP.UPDATE_INDICATION = true;
}

void DATA_SET_GADGET::update(AUTOMOBILE_DATA_LINE Data, int Bar_Value_1, int Bar_Value_2, 
                              string Calculation, unsigned long tmeFrame_Time)
{
  DESCRIPTION.set_text(to_string_hex(Data.ID_DATA[0]) + " " + 
                        to_string_hex(Data.ID_DATA[1]) + " " +
                        PROP.DESCRIPTION, tmeFrame_Time);

  DATA_BAR_A.update(Bar_Value_1, tmeFrame_Time);
  DATA_BAR_B.update(Bar_Value_2, tmeFrame_Time);

  DATA_FIELD_0.set_text(to_string_hex(Data.DATA[0]), tmeFrame_Time);
  DATA_FIELD_1.set_text(to_string_hex(Data.DATA[1]), tmeFrame_Time);
  DATA_FIELD_2.set_text(to_string_hex(Data.DATA[2]), tmeFrame_Time);
  DATA_FIELD_3.set_text(to_string_hex(Data.DATA[3]), tmeFrame_Time);
  DATA_FIELD_4.set_text(to_string_hex(Data.DATA[4]), tmeFrame_Time);
  DATA_FIELD_5.set_text(to_string_hex(Data.DATA[5]), tmeFrame_Time);
  DATA_FIELD_6.set_text(to_string_hex(Data.DATA[6]), tmeFrame_Time);
  DATA_FIELD_7.set_text(to_string_hex(Data.DATA[7]), tmeFrame_Time);

  CALCULATION.set_text(Calculation, tmeFrame_Time);
}

void DATA_SET_GADGET::update(AUTOMOBILE_DATA_LINE Data, 
                              string Calculation, unsigned long tmeFrame_Time)
{
  update(Data, 0, 0, Calculation, tmeFrame_Time);
}

void DATA_SET_GADGET::draw(PANEL Host_Panel, bool Refresh, unsigned long tmeFrame_Time)
{
  DESCRIPTION.draw(Host_Panel, Refresh);

  DATA_BAR_A.draw(Host_Panel, Refresh);
  DATA_BAR_B.draw(Host_Panel, Refresh);

  DATA_FIELD_0.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_1.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_2.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_3.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_4.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_5.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_6.draw(Host_Panel, Refresh, tmeFrame_Time);
  DATA_FIELD_7.draw(Host_Panel, Refresh, tmeFrame_Time);

  CALCULATION.draw(Host_Panel, Refresh, tmeFrame_Time);
}

// -------------------------------------------------------------------------------------
//  DUEL_BAR_GUAGE_GADGET

void DUEL_BAR_GUAGE_GADGET::create()
{
  // Bar Guages
  DATA_BAR_A.PROP.LABEL = "";
  DATA_BAR_A.PROP.INDICATOR_CHARACTER = '0';
  DATA_BAR_A.PROP.LABEL_SIZE = 0;
  DATA_BAR_A.PROP.COLOR = COLOR_WHITE;
  DATA_BAR_A.PROP.BCOLOR = COLOR_BLACK;
  DATA_BAR_A.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  DATA_BAR_A.PROP.COLOR_MARKER = COLOR_BLUE;
  DATA_BAR_A.PROP.BCOLOR_MARKER = COLOR_WHITE;
  DATA_BAR_A.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  DATA_BAR_A.PROP.POSY = PROP.POSY + 4;
  DATA_BAR_A.PROP.POSX = PROP.POSX + 0;
  DATA_BAR_A.PROP.BAR_SIZE = 19;
  DATA_BAR_A.PROP.GUAGE_BAR = true;
  DATA_BAR_A.PROP.MAX_VALUE = PROP.BAR_A_MAX_VALUE;
  DATA_BAR_A.PROP.MIN_VALUE = 0;
  DATA_BAR_A.PROP.MIN_MAX = true;
  DATA_BAR_A.PROP.MIN_MAX_FILLER = true;
  DATA_BAR_A.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  DATA_BAR_A.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  DATA_BAR_A.PROP.MIN_MAX_INDICATORS = false;
  DATA_BAR_A.MIN_MAX_HISTORY.PROP.SLICES = 20;
  DATA_BAR_A.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  DATA_BAR_A.PROP.COLORS_ON = true;
  DATA_BAR_A.PROP.PRINT_VALUE = false;
  DATA_BAR_A.PROP.PRINT_MIN = false;
  DATA_BAR_A.PROP.PRINT_MAX = false;

  DATA_BAR_B.PROP.LABEL = "";
  DATA_BAR_B.PROP.INDICATOR_CHARACTER = '0';
  DATA_BAR_B.PROP.LABEL_SIZE = 0;
  DATA_BAR_B.PROP.COLOR = COLOR_WHITE;
  DATA_BAR_B.PROP.BCOLOR = COLOR_BLACK;
  DATA_BAR_B.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  DATA_BAR_B.PROP.COLOR_MARKER = COLOR_BLUE;
  DATA_BAR_B.PROP.BCOLOR_MARKER = COLOR_WHITE;
  DATA_BAR_B.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  DATA_BAR_B.PROP.POSY = PROP.POSY + 3;
  DATA_BAR_B.PROP.POSX = PROP.POSX + 0;
  DATA_BAR_B.PROP.BAR_SIZE = 19;
  DATA_BAR_B.PROP.GUAGE_BAR = true;
  DATA_BAR_B.PROP.MAX_VALUE = PROP.BAR_B_MAX_VALUE;
  DATA_BAR_B.PROP.MIN_VALUE = 0;
  DATA_BAR_B.PROP.MIN_MAX = true;
  DATA_BAR_B.PROP.MIN_MAX_FILLER = true;
  DATA_BAR_B.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  DATA_BAR_B.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  DATA_BAR_B.PROP.MIN_MAX_INDICATORS = false;
  DATA_BAR_B.MIN_MAX_HISTORY.PROP.SLICES = 20;
  DATA_BAR_B.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  DATA_BAR_B.PROP.COLORS_ON = true;
  DATA_BAR_B.PROP.PRINT_VALUE = false;
  DATA_BAR_B.PROP.PRINT_MIN = false;
  DATA_BAR_B.PROP.PRINT_MAX = false;
  
  // SCALE
  SCALE.PROP.POSX = PROP.POSX + 1;
  SCALE.PROP.POSY = PROP.POSY + 2;
  SCALE.PROP.SIZEX = 19;
  SCALE.PROP.COLORS_ON = true;
  SCALE.PROP.BCOLOR = COLOR_WHITE;
  SCALE.PROP.COLOR = COLOR_BLACK;
  SCALE.PROP.JUSTIFICATION_LEFT = true;
  SCALE.PROP.UPDATE_INDICATION = false;
  SCALE.set_text(PROP.SCALE_BAR);

  VALUE.PROP.POSX = PROP.POSX + 5;
  VALUE.PROP.POSY = PROP.POSY + 1;
  VALUE.PROP.SIZEX = PROP.SIZEX - 5 - 5 - 2;
  VALUE.PROP.COLORS_ON = true;
  VALUE.PROP.BCOLOR = COLOR_BLACK;
  VALUE.PROP.COLOR = COLOR_WHITE;
  VALUE.PROP.JUSTIFICATION_CENTER = true;
  VALUE.PROP.UPDATE_INDICATION = false;

  MIN.PROP.POSX = PROP.POSX + 1;
  MIN.PROP.POSY = PROP.POSY + 1;
  MIN.PROP.SIZEX = 5;
  MIN.PROP.COLORS_ON = true;
  MIN.PROP.BCOLOR = COLOR_BLACK;
  MIN.PROP.COLOR = COLOR_WHITE;
  MIN.PROP.JUSTIFICATION_LEFT = true;
  MIN.PROP.UPDATE_INDICATION = true;

  MAX.PROP.POSX = PROP.POSX + PROP.SIZEX - 7;
  MAX.PROP.POSY = PROP.POSY + 1;
  MAX.PROP.SIZEX = 5;
  MAX.PROP.COLORS_ON = true;
  MAX.PROP.BCOLOR = COLOR_BLACK;
  MAX.PROP.COLOR = COLOR_WHITE;
  MAX.PROP.JUSTIFICATION_RIGHT = true;
  MAX.PROP.UPDATE_INDICATION = true;

  DESCRIPTION.PROP.POSX = PROP.POSX + 0;
  DESCRIPTION.PROP.POSY = PROP.POSY + 0;
  DESCRIPTION.PROP.SIZEX = PROP.SIZEX;
  DESCRIPTION.PROP.COLORS_ON = true;
  DESCRIPTION.PROP.BCOLOR = COLOR_BLACK;
  DESCRIPTION.PROP.COLOR = COLOR_WHITE;
  DESCRIPTION.PROP.JUSTIFICATION_CENTER = true;
  DESCRIPTION.PROP.UPDATE_INDICATION = false;
  DESCRIPTION.set_text(PROP.DESCRIPTION);
}

void DUEL_BAR_GUAGE_GADGET::update(float Value, unsigned long tmeFrame_Time)
{
  float value = Value / PROP.SCALE;

  DATA_BAR_A.update(value, tmeFrame_Time);
  DATA_BAR_B.update(((int)(value * 10) % 100), tmeFrame_Time);

  VALUE.set_text(to_string_round_to_nth(value, 1), tmeFrame_Time);

  MIN.set_text(to_string(DATA_BAR_A.MIN_MAX_HISTORY.min()), tmeFrame_Time);
  MAX.set_text(to_string(DATA_BAR_A.MIN_MAX_HISTORY.max()), tmeFrame_Time);
}

void DUEL_BAR_GUAGE_GADGET::draw(PANEL Host_Panel, bool Refresh, unsigned long tmeFrame_Time)
{
  SCALE.draw(Host_Panel, Refresh);
  DATA_BAR_A.draw(Host_Panel, Refresh);
  DATA_BAR_B.draw(Host_Panel, Refresh);
  VALUE.draw(Host_Panel, Refresh, tmeFrame_Time);
  MIN.draw(Host_Panel, Refresh, tmeFrame_Time);
  MAX.draw(Host_Panel, Refresh, tmeFrame_Time);
  DESCRIPTION.draw(Host_Panel, Refresh);
}

// -------------------------------------------------------------------------------------
//  Automobile Panel Class

void AUTOMOBILE_GADGET::create()
{
  //-----------
  // Build Display Window

  AUTOMOBILE_PANEL.PROP.SIZEY = PROP.SIZEY;
  AUTOMOBILE_PANEL.PROP.SIZEX = PROP.SIZEX;
  AUTOMOBILE_PANEL.PROP.POSY = PROP.POSY;
  AUTOMOBILE_PANEL.PROP.POSX = PROP.POSX;
  AUTOMOBILE_PANEL.PROP.COLOR = COLOR_WHITE;
  AUTOMOBILE_PANEL.PROP.BCOLOR = COLOR_BLACK;

  AUTOMOBILE_PANEL.create();

  //-----------
  MESSAGES.PROP.POSY = 0;
  MESSAGES.PROP.POSX = 0;
  MESSAGES.PROP.SIZEX = 9;
  MESSAGES.PROP.COLORS_ON = true;
  MESSAGES.PROP.BCOLOR = COLOR_BLACK;
  MESSAGES.PROP.COLOR = COLOR_WHITE;
  MESSAGES.PROP.JUSTIFICATION_LEFT = true;

  AD_UNKNOWN.PROP.POSY = 0;
  AD_UNKNOWN.PROP.POSX = 9;
  AD_UNKNOWN.PROP.SIZEX = 38;
  AD_UNKNOWN.PROP.COLORS_ON = true;
  AD_UNKNOWN.PROP.BCOLOR = COLOR_BLACK;
  AD_UNKNOWN.PROP.COLOR = COLOR_WHITE;
  AD_UNKNOWN.PROP.JUSTIFICATION_RIGHT = true;

  //-----------
  // Large Velocity
  LARGE_SPEED_DESC.PROP.POSX = 0;
  LARGE_SPEED_DESC.PROP.POSY = 1;
  LARGE_SPEED_DESC.PROP.SIZEX = 1;
  LARGE_SPEED_DESC.PROP.SIZEY = 5;
  LARGE_SPEED_DESC.PROP.COLORS_ON = true;
  LARGE_SPEED_DESC.PROP.UPDATE_INDICATION = false;
  LARGE_SPEED_DESC.set_color(COLOR_WHITE, COLOR_BLUE);
  LARGE_SPEED_DESC.PROP.JUSTIFICATION_LEFT = true;
  LARGE_SPEED_DESC.set_text(" \nM\np\nH");

  LARGE_SPEED_10.PROP.POSX = 1;
  LARGE_SPEED_10.PROP.POSY = 1;
  LARGE_SPEED_10.PROP.SIZEX = 6;
  LARGE_SPEED_10.PROP.SIZEY = 5;
  LARGE_SPEED_10.PROP.COLORS_ON = true;
  LARGE_SPEED_10.PROP.UPDATE_INDICATION = false;
  LARGE_SPEED_10.set_color(COLOR_WHITE, COLOR_BLACK);
  LARGE_SPEED_10.PROP.JUSTIFICATION_LEFT = true;

  LARGE_SPEED_1.PROP.POSX = 7;
  LARGE_SPEED_1.PROP.POSY = 1;
  LARGE_SPEED_1.PROP.SIZEX = 6;
  LARGE_SPEED_1.PROP.SIZEY = 5;
  LARGE_SPEED_1.PROP.COLORS_ON = true;
  LARGE_SPEED_1.PROP.UPDATE_INDICATION = false;
  LARGE_SPEED_1.set_color(COLOR_WHITE, COLOR_BLACK);
  LARGE_SPEED_1.PROP.JUSTIFICATION_LEFT = true;

  //-----------
  // Large Velocity
  LARGE_ACCELERATION_DESC.PROP.POSX = 0 + 0;
  LARGE_ACCELERATION_DESC.PROP.POSY = 6;
  LARGE_ACCELERATION_DESC.PROP.SIZEX = 1;
  LARGE_ACCELERATION_DESC.PROP.SIZEY = 5;
  LARGE_ACCELERATION_DESC.PROP.COLORS_ON = true;
  LARGE_ACCELERATION_DESC.PROP.UPDATE_INDICATION = false;
  LARGE_ACCELERATION_DESC.set_color(COLOR_WHITE, COLOR_BLUE);
  LARGE_ACCELERATION_DESC.PROP.JUSTIFICATION_LEFT = true;
  LARGE_ACCELERATION_DESC.set_text("m\n/\ns\n2");

  LARGE_ACCELERATION_10.PROP.POSX = 1 + 0;
  LARGE_ACCELERATION_10.PROP.POSY = 6;
  LARGE_ACCELERATION_10.PROP.SIZEX = 6;
  LARGE_ACCELERATION_10.PROP.SIZEY = 4;
  LARGE_ACCELERATION_10.PROP.COLORS_ON = true;
  LARGE_ACCELERATION_10.PROP.UPDATE_INDICATION = false;
  LARGE_ACCELERATION_10.set_color(COLOR_WHITE, COLOR_BLACK);
  LARGE_ACCELERATION_10.PROP.JUSTIFICATION_LEFT = true;

  LARGE_ACCELERATION_1.PROP.POSX = 1 + 6;
  LARGE_ACCELERATION_1.PROP.POSY = 6;
  LARGE_ACCELERATION_1.PROP.SIZEX = 6;
  LARGE_ACCELERATION_1.PROP.SIZEY = 4;
  LARGE_ACCELERATION_1.PROP.COLORS_ON = true;
  LARGE_ACCELERATION_1.PROP.UPDATE_INDICATION = false;
  LARGE_ACCELERATION_1.set_color(COLOR_WHITE, COLOR_BLACK);
  LARGE_ACCELERATION_1.PROP.JUSTIFICATION_LEFT = true;

  LARGE_ACCELERATION_MIN.PROP.POSX = 1 + 0;
  LARGE_ACCELERATION_MIN.PROP.POSY = 6 + 4;
  LARGE_ACCELERATION_MIN.PROP.SIZEX = 6;
  LARGE_ACCELERATION_MIN.PROP.COLORS_ON = true;
  LARGE_ACCELERATION_MIN.PROP.BCOLOR = COLOR_WHITE;
  LARGE_ACCELERATION_MIN.PROP.COLOR = COLOR_BLACK;
  LARGE_ACCELERATION_MIN.PROP.JUSTIFICATION_LEFT = true;

  LARGE_ACCELERATION_MAX.PROP.POSX = 1 + 6;
  LARGE_ACCELERATION_MAX.PROP.POSY = 6 + 4;
  LARGE_ACCELERATION_MAX.PROP.SIZEX = 6;
  LARGE_ACCELERATION_MAX.PROP.COLORS_ON = true;
  LARGE_ACCELERATION_MAX.PROP.BCOLOR = COLOR_WHITE;
  LARGE_ACCELERATION_MAX.PROP.COLOR = COLOR_BLACK;
  LARGE_ACCELERATION_MAX.PROP.JUSTIFICATION_RIGHT = true;

  //-----------
  // Large Gear
  LARGE_GEAR_DESC.PROP.POSX = 49 + 6 + 6;
  LARGE_GEAR_DESC.PROP.POSY = 1;
  LARGE_GEAR_DESC.PROP.SIZEX = 1;
  LARGE_GEAR_DESC.PROP.SIZEY = 5;
  LARGE_GEAR_DESC.PROP.COLORS_ON = true;
  LARGE_GEAR_DESC.PROP.UPDATE_INDICATION = false;
  LARGE_GEAR_DESC.set_color(COLOR_WHITE, COLOR_BLUE);
  LARGE_GEAR_DESC.PROP.JUSTIFICATION_LEFT = true;
  LARGE_GEAR_DESC.set_text("G\nE\nA\nR\n ");

  LARGE_GEAR_1.PROP.POSX = 49 + 6;
  LARGE_GEAR_1.PROP.POSY = 1;
  LARGE_GEAR_1.PROP.SIZEX = 6;
  LARGE_GEAR_1.PROP.SIZEY = 5;
  LARGE_GEAR_1.PROP.COLORS_ON = true;
  LARGE_GEAR_1.PROP.UPDATE_INDICATION = true;
  LARGE_GEAR_1.set_color(COLOR_WHITE, COLOR_BLACK);
  LARGE_GEAR_1.PROP.JUSTIFICATION_LEFT = true;

  //-----------
  //Speed MIN Text

  ACCELERATION.PROP.POSX = 13 + 35;
  ACCELERATION.PROP.POSY = 1;
  ACCELERATION.PROP.SIZEX = 5;
  ACCELERATION.PROP.COLORS_ON = true;
  ACCELERATION.PROP.BCOLOR = COLOR_BLACK;
  ACCELERATION.PROP.COLOR = COLOR_WHITE;
  ACCELERATION.PROP.JUSTIFICATION_LEFT = true;

  //-----------
  // Speedometer
  SPEEDO.PROP.POSX = 13 + 0;
  SPEEDO.PROP.POSY = 1;
  SPEEDO.PROP.DESCRIPTION = "VELOCITY (Mph)";
  SPEEDO.PROP.SCALE_BAR = ".:.2.:.4.o.6.:.8.:.";
  SPEEDO.create();

  //-----------
  // Acceleration
  TACHO.PROP.POSX = 13 + 21;
  TACHO.PROP.POSY = 1;
  TACHO.PROP.DESCRIPTION = "TACH (x100)";
  TACHO.PROP.SCALE = 100;
  TACHO.PROP.SCALE_BAR = "...1...2.o.3...4...";
  TACHO.PROP.BAR_A_MAX_VALUE = 50;
  TACHO.create();

  //-----------
  // Acceleration
  POWERO.PROP.POSX = 13 + 21;
  POWERO.PROP.POSY = 6;
  POWERO.PROP.DESCRIPTION = "ORQ";
  POWERO.PROP.SCALE = 100;
  POWERO.create();

  //-----------

  // Steering Wheel Raw Data
  STEERING_WHEEL_DESC.PROP.POSX = 0 + 0;
  STEERING_WHEEL_DESC.PROP.POSY = 11;
  STEERING_WHEEL_DESC.PROP.SIZEX = 15;
  STEERING_WHEEL_DESC.PROP.COLORS_ON = true;
  STEERING_WHEEL_DESC.PROP.BCOLOR = COLOR_BLACK;
  STEERING_WHEEL_DESC.PROP.COLOR = COLOR_WHITE;
  STEERING_WHEEL_DESC.PROP.JUSTIFICATION_LEFT = true;
  STEERING_WHEEL_DESC.set_text("Steering Wheel:");

  // Steering Wheel Guage
  STEERING_WHEEL.PROP.LABEL = "";
  STEERING_WHEEL.PROP.INDICATOR_CHARACTER = '0';
  STEERING_WHEEL.PROP.LABEL_SIZE = 0;
  STEERING_WHEEL.PROP.COLOR = COLOR_WHITE;
  STEERING_WHEEL.PROP.BCOLOR = COLOR_BLACK;
  STEERING_WHEEL.PROP.COLOR_BAR_BACK = COLOR_BLUE;
  STEERING_WHEEL.PROP.COLOR_MARKER = COLOR_BLUE;
  STEERING_WHEEL.PROP.BCOLOR_MARKER = COLOR_WHITE;
  STEERING_WHEEL.PROP.COLOR_MARKER_LIMIT = COLOR_YELLOW;
  STEERING_WHEEL.PROP.POSY = 12;
  STEERING_WHEEL.PROP.POSX = 0 + 0;
  STEERING_WHEEL.PROP.BAR_SIZE = 49 + 6 + 5;
  STEERING_WHEEL.PROP.GUAGE_BAR = true;
  STEERING_WHEEL.PROP.MAX_VALUE = 360;
  STEERING_WHEEL.PROP.MIN_VALUE = 0;
  STEERING_WHEEL.PROP.MIN_MAX = true;
  STEERING_WHEEL.PROP.MIN_MAX_FILLER = true;
  STEERING_WHEEL.PROP.MIN_MAX_FILLER_BCOLOR = COLOR_BLUE;
  STEERING_WHEEL.PROP.MIN_MAX_FILLER_COLOR = COLOR_WHITE;
  STEERING_WHEEL.PROP.MIN_MAX_INDICATORS = false;
  STEERING_WHEEL.MIN_MAX_HISTORY.PROP.SLICES = 20;
  STEERING_WHEEL.MIN_MAX_HISTORY.PROP.TIME_SPAN = 60000;
  STEERING_WHEEL.PROP.COLORS_ON = true;

  // Steering Wheel Angle Text
  STEERING_WHEEL_ANGLE.PROP.POSX = 49 + 6 + 4 - 20;
  STEERING_WHEEL_ANGLE.PROP.POSY = 11;
  STEERING_WHEEL_ANGLE.PROP.SIZEX = 20;
  STEERING_WHEEL_ANGLE.PROP.COLORS_ON = true;
  STEERING_WHEEL_ANGLE.PROP.BCOLOR = COLOR_BLACK;
  STEERING_WHEEL_ANGLE.PROP.COLOR = COLOR_WHITE;
  STEERING_WHEEL_ANGLE.PROP.JUSTIFICATION_RIGHT = true;

  //-----------

  ST_0_0.PROP.POSX = 0 + 0;
  ST_0_0.PROP.POSY = 14;
  ST_0_0.PROP.SIZEX = 9;
  ST_0_0.PROP.COLORS_ON = true;
  ST_0_0.PROP.BCOLOR = COLOR_BLACK;
  ST_0_0.PROP.COLOR = COLOR_WHITE;
  ST_0_0.PROP.JUSTIFICATION_LEFT = true;
  ST_0_0.set_text(" Ambiant:");

  ST_0_1.PROP.POSX = 0 + 0;
  ST_0_1.PROP.POSY = 15;
  ST_0_1.PROP.SIZEX = 9;
  ST_0_1.PROP.COLORS_ON = true;
  ST_0_1.PROP.BCOLOR = COLOR_BLACK;
  ST_0_1.PROP.COLOR = COLOR_WHITE;
  ST_0_1.PROP.JUSTIFICATION_LEFT = true;
  ST_0_1.set_text("  Intake:");

  ST_0_2.PROP.POSX = 0 + 0;
  ST_0_2.PROP.POSY = 16;
  ST_0_2.PROP.SIZEX = 9;
  ST_0_2.PROP.COLORS_ON = true;
  ST_0_2.PROP.BCOLOR = COLOR_BLACK;
  ST_0_2.PROP.COLOR = COLOR_WHITE;
  ST_0_2.PROP.JUSTIFICATION_LEFT = true;
  ST_0_2.set_text(" Coolant:");

  ST_0_3.PROP.POSX = 0 + 0;
  ST_0_3.PROP.POSY = 17;
  ST_0_3.PROP.SIZEX = 9;
  ST_0_3.PROP.COLORS_ON = true;
  ST_0_3.PROP.BCOLOR = COLOR_BLACK;
  ST_0_3.PROP.COLOR = COLOR_WHITE;
  ST_0_3.PROP.JUSTIFICATION_LEFT = true;
  ST_0_3.set_text("Catalyst:");

  ST_0_4.PROP.POSX = 0 + 0;
  ST_0_4.PROP.POSY = 18;
  ST_0_4.PROP.SIZEX = 9;
  ST_0_4.PROP.COLORS_ON = true;
  ST_0_4.PROP.BCOLOR = COLOR_BLACK;
  ST_0_4.PROP.COLOR = COLOR_WHITE;
  ST_0_4.PROP.JUSTIFICATION_LEFT = true;
  //ST_0_4.set_text(" Voltage:");

  ST_0_5.PROP.POSX = 0 + 0;
  ST_0_5.PROP.POSY = 19;
  ST_0_5.PROP.SIZEX = 9;
  ST_0_5.PROP.COLORS_ON = true;
  ST_0_5.PROP.BCOLOR = COLOR_BLACK;
  ST_0_5.PROP.COLOR = COLOR_WHITE;
  ST_0_5.PROP.JUSTIFICATION_LEFT = true;
  ST_0_5.set_text("Fuel Rl:");

  ST_0_6.PROP.POSX = 0 + 0;
  ST_0_6.PROP.POSY = 20;
  ST_0_6.PROP.SIZEX = 9;
  ST_0_6.PROP.COLORS_ON = true;
  ST_0_6.PROP.BCOLOR = COLOR_BLACK;
  ST_0_6.PROP.COLOR = COLOR_WHITE;
  ST_0_6.PROP.JUSTIFICATION_LEFT = true;
  ST_0_6.set_text("Evap Vap:");

  ST_0_7.PROP.POSX = 0 + 0;
  ST_0_7.PROP.POSY = 21;
  ST_0_7.PROP.SIZEX = 9;
  ST_0_7.PROP.COLORS_ON = true;
  ST_0_7.PROP.BCOLOR = COLOR_BLACK;
  ST_0_7.PROP.COLOR = COLOR_WHITE;
  ST_0_7.PROP.JUSTIFICATION_LEFT = true;
  //ST_0_7.set_text(" Ambiant:");

  ST_0_8.PROP.POSX = 0 + 0;
  ST_0_8.PROP.POSY = 22;
  ST_0_8.PROP.SIZEX = 9;
  ST_0_8.PROP.COLORS_ON = true;
  ST_0_8.PROP.BCOLOR = COLOR_BLACK;
  ST_0_8.PROP.COLOR = COLOR_WHITE;
  ST_0_8.PROP.JUSTIFICATION_LEFT = true;
  ST_0_8.set_text(" Voltage:");

  ST_0_9.PROP.POSX = 0 + 0;
  ST_0_9.PROP.POSY = 23;
  ST_0_9.PROP.SIZEX = 9;
  ST_0_9.PROP.COLORS_ON = true;
  ST_0_9.PROP.BCOLOR = COLOR_BLACK;
  ST_0_9.PROP.COLOR = COLOR_WHITE;
  ST_0_9.PROP.JUSTIFICATION_LEFT = true;
  //ST_0_9.set_text("  Intake:");

  ST_0_10.PROP.POSX = 0 + 0;
  ST_0_10.PROP.POSY = 24;
  ST_0_10.PROP.SIZEX = 9;
  ST_0_10.PROP.COLORS_ON = true;
  ST_0_10.PROP.BCOLOR = COLOR_BLACK;
  ST_0_10.PROP.COLOR = COLOR_WHITE;
  ST_0_10.PROP.JUSTIFICATION_LEFT = true;
  ST_0_10.set_text("    Baro:");

  //-----------
  
  ST_1_0.PROP.POSX = 10 + 0;
  ST_1_0.PROP.POSY = 14;
  ST_1_0.PROP.SIZEX = 8;
  ST_1_0.PROP.COLORS_ON = true;
  ST_1_0.PROP.BCOLOR = COLOR_BLACK;
  ST_1_0.PROP.COLOR = COLOR_WHITE;
  ST_1_0.PROP.JUSTIFICATION_LEFT = true;
  ST_1_0.PROP.UPDATE_INDICATION = true;
  ST_1_0.PROP.AUTO_COLOR = true;
  ST_1_0.set_text("XX");

  ST_1_1.PROP.POSX = 10 + 0;
  ST_1_1.PROP.POSY = 15;
  ST_1_1.PROP.SIZEX = 8;
  ST_1_1.PROP.COLORS_ON = true;
  ST_1_1.PROP.BCOLOR = COLOR_BLACK;
  ST_1_1.PROP.COLOR = COLOR_WHITE;
  ST_1_1.PROP.JUSTIFICATION_LEFT = true;
  ST_1_1.PROP.UPDATE_INDICATION = true;
  ST_1_1.PROP.AUTO_COLOR = true;
  ST_1_1.set_text("XX");

  ST_1_2.PROP.POSX = 10 + 0;
  ST_1_2.PROP.POSY = 16;
  ST_1_2.PROP.SIZEX = 8;
  ST_1_2.PROP.COLORS_ON = true;
  ST_1_2.PROP.BCOLOR = COLOR_BLACK;
  ST_1_2.PROP.COLOR = COLOR_WHITE;
  ST_1_2.PROP.JUSTIFICATION_LEFT = true;
  ST_1_2.PROP.UPDATE_INDICATION = true;
  ST_1_2.PROP.AUTO_COLOR = true;
  ST_1_2.set_text("XX");

  ST_1_3.PROP.POSX = 10 + 0;
  ST_1_3.PROP.POSY = 17;
  ST_1_3.PROP.SIZEX = 8;
  ST_1_3.PROP.COLORS_ON = true;
  ST_1_3.PROP.BCOLOR = COLOR_BLACK;
  ST_1_3.PROP.COLOR = COLOR_WHITE;
  ST_1_3.PROP.JUSTIFICATION_LEFT = true;
  ST_1_3.PROP.UPDATE_INDICATION = true;
  ST_1_3.PROP.AUTO_COLOR = true;
  ST_1_3.set_text("XX");

  ST_1_4.PROP.POSX = 10 + 0;
  ST_1_4.PROP.POSY = 18;
  ST_1_4.PROP.SIZEX = 8;
  ST_1_4.PROP.COLORS_ON = true;
  ST_1_4.PROP.BCOLOR = COLOR_BLACK;
  ST_1_4.PROP.COLOR = COLOR_WHITE;
  ST_1_4.PROP.JUSTIFICATION_LEFT = true;
  ST_1_4.PROP.UPDATE_INDICATION = true;
  ST_1_4.PROP.AUTO_COLOR = true;
  //ST_1_4.set_text("XX");

  ST_1_5.PROP.POSX = 10 + 0;
  ST_1_5.PROP.POSY = 19;
  ST_1_5.PROP.SIZEX = 8;
  ST_1_5.PROP.COLORS_ON = true;
  ST_1_5.PROP.BCOLOR = COLOR_BLACK;
  ST_1_5.PROP.COLOR = COLOR_WHITE;
  ST_1_5.PROP.JUSTIFICATION_LEFT = true;
  ST_1_5.PROP.UPDATE_INDICATION = true;
  ST_1_5.PROP.AUTO_COLOR = true;
  ST_1_5.set_text("XX");

  ST_1_6.PROP.POSX = 10 + 0;
  ST_1_6.PROP.POSY = 20;
  ST_1_6.PROP.SIZEX = 8;
  ST_1_6.PROP.COLORS_ON = true;
  ST_1_6.PROP.BCOLOR = COLOR_BLACK;
  ST_1_6.PROP.COLOR = COLOR_WHITE;
  ST_1_6.PROP.JUSTIFICATION_LEFT = true;
  ST_1_6.PROP.UPDATE_INDICATION = true;
  ST_1_6.PROP.AUTO_COLOR = true;
  ST_1_6.set_text("XX");

  ST_1_7.PROP.POSX = 10 + 0;
  ST_1_7.PROP.POSY = 21;
  ST_1_7.PROP.SIZEX = 8;
  ST_1_7.PROP.COLORS_ON = true;
  ST_1_7.PROP.BCOLOR = COLOR_BLACK;
  ST_1_7.PROP.COLOR = COLOR_WHITE;
  ST_1_7.PROP.JUSTIFICATION_LEFT = true;
  ST_1_7.PROP.UPDATE_INDICATION = true;
  ST_1_7.PROP.AUTO_COLOR = true;
  //ST_1_7.set_text("XX");

  ST_1_8.PROP.POSX = 10 + 0;
  ST_1_8.PROP.POSY = 22;
  ST_1_8.PROP.SIZEX = 8;
  ST_1_8.PROP.COLORS_ON = true;
  ST_1_8.PROP.BCOLOR = COLOR_BLACK;
  ST_1_8.PROP.COLOR = COLOR_WHITE;
  ST_1_8.PROP.JUSTIFICATION_LEFT = true;
  ST_1_8.PROP.UPDATE_INDICATION = true;
  ST_1_8.PROP.AUTO_COLOR = true;
  ST_1_8.set_text("XX");

  ST_1_9.PROP.POSX = 10 + 0;
  ST_1_9.PROP.POSY = 23;
  ST_1_9.PROP.SIZEX = 8;
  ST_1_9.PROP.COLORS_ON = true;
  ST_1_9.PROP.BCOLOR = COLOR_BLACK;
  ST_1_9.PROP.COLOR = COLOR_WHITE;
  ST_1_9.PROP.JUSTIFICATION_LEFT = true;
  ST_1_9.PROP.UPDATE_INDICATION = true;
  ST_1_9.PROP.AUTO_COLOR = true;
  //ST_1_9.set_text("XX");

  ST_1_10.PROP.POSX = 10 + 0;
  ST_1_10.PROP.POSY = 24;
  ST_1_10.PROP.SIZEX = 10;
  ST_1_10.PROP.COLORS_ON = true;
  ST_1_10.PROP.BCOLOR = COLOR_BLACK;
  ST_1_10.PROP.COLOR = COLOR_WHITE;
  ST_1_10.PROP.JUSTIFICATION_LEFT = true;
  ST_1_10.PROP.UPDATE_INDICATION = true;
  ST_1_10.PROP.AUTO_COLOR = true;
  ST_1_10.set_text("XX");

  //-----------
  
  /*
  DATA_SET_01.PROP.POSX = 0 + 0;
  DATA_SET_01.PROP.POSY = 14;
  DATA_SET_01.PROP.DESCRIPTION = "Speed";
  DATA_SET_01.create();
  
  DATA_SET_02.PROP.POSX = 0 + 14;
  DATA_SET_02.PROP.POSY = 14;
  DATA_SET_02.PROP.DESCRIPTION = "Gear";
  DATA_SET_02.create();
  */
  
  DATA_SET_03.PROP.POSX = 0 + 28;
  DATA_SET_03.PROP.POSY = 14;
  DATA_SET_03.create();
  
  DATA_SET_04.PROP.POSX = 0 + 42;
  DATA_SET_04.PROP.POSY = 14;
  DATA_SET_04.create();
  
  /*
  DATA_SET_05.PROP.POSX = 0 + 0;
  DATA_SET_05.PROP.POSY = 21;
  DATA_SET_05.create();
  
  DATA_SET_06.PROP.POSX = 0 + 14;
  DATA_SET_06.PROP.POSY = 21;
  DATA_SET_06.create();
  */
  
  DATA_SET_07.PROP.POSX = 0 + 28;
  DATA_SET_07.PROP.POSY = 21;
  DATA_SET_07.create();
  
  DATA_SET_08.PROP.POSX = 0 + 42;
  DATA_SET_08.PROP.POSY = 21;
  DATA_SET_08.create();
}

void AUTOMOBILE_GADGET::update(system_data &sdSysData, unsigned long tmeFrame_Time)
{  
  //--

  MESSAGES.set_text(to_string(sdSysData.CAR_INFO.message_count));

  AD_UNKNOWN.set_text(sdSysData.CAR_INFO.DATA.AD_UNKNOWN.ORIG);

  //-----------
  // Large Velocity
  if (sdSysData.CAR_INFO.STATUS.SPEED.SPEED_TRANS.val_mph() >= 10)
  {
    LARGE_SPEED_10.set_text(NUMBERS_6X5.number(get_2_pos_of_int((int)sdSysData.CAR_INFO.STATUS.SPEED.SPEED_TRANS.val_mph())), tmeFrame_Time);
  }
  else
  {
    LARGE_SPEED_10.set_text(NUMBERS_6X5.space(), tmeFrame_Time);
  }

  LARGE_SPEED_1.set_text(NUMBERS_6X5.number(get_1_pos_of_int((int)sdSysData.CAR_INFO.STATUS.SPEED.SPEED_TRANS.val_mph())), tmeFrame_Time);

  if (sdSysData.CAR_INFO.STATUS.INDICATORS.cruise_control() == true)
  {
    if (is_within(sdSysData.CAR_INFO.STATUS.SPEED.SPEED_TRANS.val_mph(), 
                  sdSysData.CAR_INFO.STATUS.INDICATORS.cruise_control_speed() - .5,
                  sdSysData.CAR_INFO.STATUS.INDICATORS.cruise_control_speed() + .5) == true)
    {
      LARGE_SPEED_1.set_color(COLOR_GREEN, COLOR_BLACK);
      LARGE_SPEED_10.set_color(COLOR_GREEN, COLOR_BLACK);
    }
    else
    {
      LARGE_SPEED_1.set_color(COLOR_YELLOW, COLOR_BLACK);
      LARGE_SPEED_10.set_color(COLOR_YELLOW, COLOR_BLACK);
    }
  }
  else
  {
    LARGE_SPEED_1.set_color(COLOR_WHITE, COLOR_BLACK);
    LARGE_SPEED_10.set_color(COLOR_WHITE, COLOR_BLACK);
  }

  //-----------
  // Large ACCELERATION
  LARGE_ACCELERATION_10.set_text(NUMBERS_6X5.number(get_2_pos_of_int(10 * abs(sdSysData.CAR_INFO.CALCULATED.acceleration()))), tmeFrame_Time);
  LARGE_ACCELERATION_1.set_text(NUMBERS_6X5.number(get_1_pos_of_int(10 * abs(sdSysData.CAR_INFO.CALCULATED.acceleration()))), tmeFrame_Time);

  if (sdSysData.CAR_INFO.CALCULATED.acceleration() >= -.1)
  {
    LARGE_ACCELERATION_DESC.set_color(COLOR_WHITE, COLOR_BLUE);
  }
  else
  {
    LARGE_ACCELERATION_DESC.set_color(COLOR_YELLOW, COLOR_BLACK);
  }

  if (sdSysData.CAR_INFO.CALCULATED.acceleration() >= -5 && sdSysData.CAR_INFO.CALCULATED.acceleration() <= 3)
  {
    LARGE_ACCELERATION_10.set_color(COLOR_WHITE, COLOR_BLACK);
    LARGE_ACCELERATION_1.set_color(COLOR_WHITE, COLOR_BLACK);
    LARGE_ACCELERATION_MIN.set_color(COLOR_WHITE, COLOR_BLACK);
    LARGE_ACCELERATION_MAX.set_color(COLOR_WHITE, COLOR_BLACK);
  }
  else
  {
    LARGE_ACCELERATION_10.set_color(COLOR_YELLOW, COLOR_BLACK);
    LARGE_ACCELERATION_1.set_color(COLOR_YELLOW, COLOR_BLACK);
    LARGE_ACCELERATION_MIN.set_color(COLOR_YELLOW, COLOR_BLACK);
    LARGE_ACCELERATION_MAX.set_color(COLOR_YELLOW, COLOR_BLACK);
  }

  LARGE_ACCELERATION_MIN.set_text(to_string_round_to_nth(abs(sdSysData.CAR_INFO.CALCULATED.ACCELERATION_MIN_MAX_HISTORY.min_float()), 1));
  LARGE_ACCELERATION_MAX.set_text(to_string_round_to_nth(sdSysData.CAR_INFO.CALCULATED.ACCELERATION_MIN_MAX_HISTORY.max_float(), 1));
  
  //-----------
  // Large GEAR
  
  LARGE_GEAR_1.set_text(NUMBERS_6X5.number(sdSysData.CAR_INFO.STATUS.GEAR.reported()), tmeFrame_Time);

  //-----------

  ACCELERATION.set_text(to_string_round_to_nth(abs(sdSysData.CAR_INFO.CALCULATED.acceleration()), 2));

  //-----------

  SPEEDO.update(sdSysData.CAR_INFO.STATUS.SPEED.SPEED_TRANS.val_mph(), tmeFrame_Time);
  TACHO.update(sdSysData.CAR_INFO.STATUS.RPM.val_rpm(), tmeFrame_Time);
  POWERO.update(sdSysData.CAR_INFO.STATUS.POWER.val_load() * 30, tmeFrame_Time);

  //-----------

  if (sdSysData.CAR_INFO.STATUS.STEERING.val_left_of_center() == true)
  {
    STEERING_WHEEL.update( -1 * (sdSysData.CAR_INFO.STATUS.STEERING.val_steering_wheel_angle()) + 180, tmeFrame_Time);
  }
  else 
  {
    STEERING_WHEEL.update(sdSysData.CAR_INFO.STATUS.STEERING.val_steering_wheel_angle() + 180, tmeFrame_Time);
  }
  
  STEERING_WHEEL_ANGLE.set_text(sdSysData.CAR_INFO.STATUS.STEERING.left_of_center() + " " + 
                                  sdSysData.CAR_INFO.STATUS.STEERING.turning_direction() + " " + 
                                  sdSysData.CAR_INFO.STATUS.STEERING.steering_wheel_angle());
  //-----------

  // Temperature   0, 32, 38, 43, 
  ST_1_0.set_text("  " + sdSysData.CAR_INFO.STATUS.TEMPS.AMBIANT_AIR_46.c(), tmeFrame_Time);
  ST_1_0.set_color(color_range_reverse(sdSysData.CAR_INFO.STATUS.TEMPS.AMBIANT_AIR_46.val_c(), 0, 32, 38, 43, 48), COLOR_BLACK);

  ST_1_1.set_text("  " + sdSysData.CAR_INFO.STATUS.TEMPS.AIR_INTAKE_0f.c(), tmeFrame_Time);
  int air_intake_ambiant_diff = sdSysData.CAR_INFO.STATUS.TEMPS.AIR_INTAKE_0f.val_c() - sdSysData.CAR_INFO.STATUS.TEMPS.AMBIANT_AIR_46.val_c();
  ST_1_1.set_color(color_range_reverse(air_intake_ambiant_diff, 0, 10, 15, 20, 25), COLOR_BLACK);

  // Coolant - 60, 90, 110, 130, 140 
  ST_1_2.set_text("  " + sdSysData.CAR_INFO.STATUS.TEMPS.COOLANT_05.c(), tmeFrame_Time);
  ST_1_2.set_color(color_range_reverse(sdSysData.CAR_INFO.STATUS.TEMPS.COOLANT_05.val_c(), 60, 90, 110, 130, 140), COLOR_BLACK);

  // Coolant - 60, 90, 110, 130, 140 
  ST_1_3.set_text("  " + sdSysData.CAR_INFO.STATUS.TEMPS.CATALYST_3C.c(), tmeFrame_Time);
  ST_1_3.set_color(color_range_reverse(sdSysData.CAR_INFO.STATUS.TEMPS.CATALYST_3C.val_c(), 150, 600, 800, 1200, 1400), COLOR_BLACK);

  //ST_1_4.set_text(" " + sdSysData.CAR_INFO.STATUS.ELECTRICAL.CONTROL_UNIT_42.v(), tmeFrame_Time);
  //ST_1_4.set_color(color_range(sdSysData.CAR_INFO.STATUS.ELECTRICAL.CONTROL_UNIT_42.val_v(), 0, 8, 10, 14, 16 ), COLOR_BLACK);

  ST_1_5.set_text(sdSysData.CAR_INFO.STATUS.FUEL.FUEL_RAIL_PRESSURE.kPa());
  ST_1_6.set_text(sdSysData.CAR_INFO.STATUS.FUEL.EVAP_SYSTEM_VAP_PRESSURE.Pa(), tmeFrame_Time);

  //ST_1_7.set_text(sdSysData.CAR_INFO.STATUS.
  
  // Voltage
  ST_1_8.set_text(" " + sdSysData.CAR_INFO.STATUS.ELECTRICAL.CONTROL_UNIT_42.v(), tmeFrame_Time);
  ST_1_8.set_color(color_range(sdSysData.CAR_INFO.STATUS.ELECTRICAL.CONTROL_UNIT_42.val_v(), 0, 8, 10, 14, 16 ), COLOR_BLACK);

  //ST_1_9.set_text(sdSysDaChar_Graphta.CAR_INFO.STATUS.
  ST_1_10.set_text(sdSysData.CAR_INFO.STATUS.TEMPS.BARO_33.inHg(), tmeFrame_Time);

  //-----------

  /*
  DATA_SET_01.update(sdSysData.CAR_INFO.DATA.AD_130, sdSysData.CAR_INFO.DATA.AD_130.DATA[6], sdSysData.CAR_INFO.DATA.AD_130.DATA[7], "", tmeFrame_Time);

  DATA_SET_02.update(sdSysData.CAR_INFO.DATA.AD_D0, sdSysData.CAR_INFO.DATA.AD_D0.DATA[6], sdSysData.CAR_INFO.DATA.AD_D0.DATA[7], 
                      "[1] " + to_string_binary(sdSysData.CAR_INFO.DATA.AD_D0.DATA[1]), tmeFrame_Time);
  */

  DATA_SET_03.PROP.DESCRIPTION = "07 E8";
  DATA_SET_03.update(sdSysData.CAR_INFO.DATA.AD_7E8, sdSysData.CAR_INFO.DATA.AD_7E8.DATA[3], sdSysData.CAR_INFO.DATA.AD_7E8.DATA[4], sdSysData.CAR_INFO.requested_pid(), tmeFrame_Time);

  DATA_SET_04.PROP.DESCRIPTION = "07 E9";
  DATA_SET_04.update(sdSysData.CAR_INFO.DATA.AD_7E9, sdSysData.CAR_INFO.DATA.AD_7E9.DATA[3], sdSysData.CAR_INFO.DATA.AD_7E9.DATA[4], sdSysData.CAR_INFO.requested_pid(), tmeFrame_Time);

  /*
  DATA_SET_05.update(sdSysData.CAR_INFO.DATA.AD_7E8, sdSysData.CAR_INFO.DATA.AD_7E8.DATA[5], sdSysData.CAR_INFO.DATA.AD_7E8.DATA[6], "", tmeFrame_Time);

  DATA_SET_06.update(sdSysData.CAR_INFO.DATA.AD_7E9, sdSysData.CAR_INFO.DATA.AD_7E9.DATA[5], sdSysData.CAR_INFO.DATA.AD_7E9.DATA[6], "", tmeFrame_Time);
  */

  DATA_SET_07.PROP.DESCRIPTION = "07 EA";
  DATA_SET_07.update(sdSysData.CAR_INFO.DATA.AD_7EA, sdSysData.CAR_INFO.DATA.AD_7EA.DATA[3], sdSysData.CAR_INFO.DATA.AD_7EA.DATA[4], sdSysData.CAR_INFO.requested_pid(), tmeFrame_Time);

  DATA_SET_08.PROP.DESCRIPTION = "07 EB";
  DATA_SET_08.update(sdSysData.CAR_INFO.DATA.AD_7EB, sdSysData.CAR_INFO.DATA.AD_7EB.DATA[3], sdSysData.CAR_INFO.DATA.AD_7EB.DATA[4], sdSysData.CAR_INFO.requested_pid(), tmeFrame_Time);

  // Test

  //-----------

  CHANGED = true;
}

bool AUTOMOBILE_GADGET::draw(bool Refresh, unsigned long tmeFrame_Time)
{
  if (CHANGED == false)
  {

  }

  MESSAGES.draw(AUTOMOBILE_PANEL, Refresh);

  AD_UNKNOWN.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------
  // Large Velocity
  LARGE_SPEED_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  LARGE_SPEED_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  LARGE_SPEED_10.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Large ACCELERATION
  LARGE_ACCELERATION_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  LARGE_ACCELERATION_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  LARGE_ACCELERATION_10.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  LARGE_ACCELERATION_MIN.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  LARGE_ACCELERATION_MAX.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------
  // Large Gear
  LARGE_GEAR_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  LARGE_GEAR_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------

  SPEEDO.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  TACHO.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  POWERO.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------

  STEERING_WHEEL_DESC.draw(AUTOMOBILE_PANEL, Refresh);
  STEERING_WHEEL.draw(AUTOMOBILE_PANEL, Refresh);
  STEERING_WHEEL_ANGLE.draw(AUTOMOBILE_PANEL, Refresh);

  //-----------

  ST_0_0.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_2.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_3.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_4.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_5.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_6.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_7.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_8.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_9.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_0_10.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  ST_1_0.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_1.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_2.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_3.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_4.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_5.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_6.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_7.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_8.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_9.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  ST_1_10.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------

  //DATA_SET_01.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  //DATA_SET_02.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  DATA_SET_03.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  DATA_SET_04.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  //DATA_SET_05.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  //DATA_SET_06.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  DATA_SET_07.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);
  DATA_SET_08.draw(AUTOMOBILE_PANEL, Refresh, tmeFrame_Time);

  //-----------

  AUTOMOBILE_PANEL.draw(Refresh);

  CHANGED = false;
  return false;
}



#endif